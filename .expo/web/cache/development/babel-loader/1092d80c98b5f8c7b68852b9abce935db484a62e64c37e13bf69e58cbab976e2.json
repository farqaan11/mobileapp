{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar db = require(\"../config/db\");\nvar crypto = require('crypto');\nvar fs = require('fs');\nvar photosDirectory = './storage/';\nvar photo_tools = require(\"../lib/photo.tools.js\");\nvar getHash = function getHash(password, salt) {\n  return crypto.pbkdf2Sync(password, salt, 100000, 256, 'sha256').toString('hex');\n};\nvar insert = function insert(user, done) {\n  var salt = crypto.randomBytes(64);\n  var hash = getHash(user.password, salt);\n  var values = [user.first_name, user.last_name, user.email, hash, salt.toString('hex')];\n  db.run('INSERT INTO whatsthat_users (given_name, family_name, email, password, salt) VALUES (?,?,?,?,?)', values, function (err) {\n    if (err) {\n      console.log(err);\n      return done(err);\n    }\n    return done(err, this.lastID);\n  });\n};\nvar authenticate = function authenticate(email, password, done) {\n  db.get('SELECT user_id, password, salt FROM whatsthat_users WHERE (email=?)', [email], function (err, row) {\n    if (err || !row) {\n      console.log(\"AUTH 1\", err, row);\n      return done(true);\n    } else {\n      if (row.salt == null) {\n        row.salt = '';\n      }\n      var salt = Buffer.from(row.salt, 'hex');\n      if (row.password === getHash(password, salt)) {\n        return done(false, row.user_id);\n      } else {\n        console.log(\"failed passwd check\");\n        return done(true);\n      }\n    }\n  });\n};\nvar getToken = function getToken(id, done) {\n  db.get('SELECT token FROM whatsthat_users WHERE user_id=?', [id], function (err, row) {\n    if (row && row.token) {\n      return done(null, row.token);\n    } else {\n      return done(null, null);\n    }\n  });\n};\nvar setToken = function setToken(id, done) {\n  var token = crypto.randomBytes(16).toString('hex');\n  db.run('UPDATE whatsthat_users SET token=? WHERE user_id=?', [token, id], function (err) {\n    return done(err, token);\n  });\n};\nvar removeToken = function removeToken(token, done) {\n  db.run('UPDATE whatsthat_users SET token=null WHERE token=?', [token], function (err) {\n    return done(err);\n  });\n};\nvar getIdFromToken = function getIdFromToken(token, done) {\n  if (token === undefined || token === null) return done(true, null);else {\n    db.get('SELECT user_id FROM whatsthat_users WHERE token=?', [token], function (err, row) {\n      if (row) return done(null, row.user_id);\n      return done(err, null);\n    });\n  }\n};\nvar getOne = function getOne(id, done) {\n  var query = 'SELECT user_id, given_name, family_name, email FROM whatsthat_users WHERE user_id=?';\n  db.get(query, [id], function (err, row) {\n    if (err) {\n      console.log(err);\n      return done(err, false);\n    }\n    if (!row || row.length == 0) {\n      return done(false, null);\n    }\n    var user = row;\n    var to_return = {\n      \"user_id\": user.user_id,\n      \"first_name\": user.given_name,\n      \"last_name\": user.family_name,\n      \"email\": user.email\n    };\n    return done(null, to_return);\n  });\n};\nvar alter = function alter(id, user, done) {\n  var query_string = '';\n  var values = [];\n  if (user.hasOwnProperty('password')) {\n    var salt = crypto.randomBytes(64);\n    var hash = getHash(user.password, salt);\n    query_string = 'UPDATE whatsthat_users SET given_name=?, family_name=?, email=?, password=?, salt=? WHERE user_id=?';\n    values = [user.first_name, user.last_name, user.email, hash, salt.toString('hex'), id];\n  } else {\n    query_string = 'UPDATE whatsthat_users SET given_name=?, family_name=?, email=? WHERE user_id=?';\n    values = [user.first_name, user.last_name, user.email, id];\n  }\n  db.run(query_string, values, function (err) {\n    done(err);\n  });\n};\nvar retreivePhoto = function () {\n  var _ref = _asyncToGenerator(function* (id, done) {\n    var filename_png = photosDirectory + id + \".png\";\n    var filename_jpg = photosDirectory + id + \".jpeg\";\n    fs.exists(filename_png, function (exists) {\n      console.log(\"PNG exists: \", exists, filename_png);\n      if (!exists) {\n        fs.exists(filename_jpg, function (exists) {\n          console.log(\"JPEG exists: \", exists, filename_jpg);\n          if (!exists) {\n            filename_jpg = photosDirectory + \"default.jpeg\";\n          }\n          console.log(\"JPG Exists, time to read...\");\n          fs.readFile(filename_jpg, function (err, image) {\n            if (err) {\n              console.log(err);\n              done(null, err);\n            } else {\n              var mimeType = photo_tools.getImageMimetype(filename_jpg);\n              done({\n                image: image,\n                mimeType: mimeType\n              }, null);\n            }\n          });\n        });\n      } else {\n        console.log(\"PNG Exists, time to read...\");\n        fs.readFile(filename_png, function (err, image) {\n          if (err) {\n            done(null, err);\n          } else {\n            var mimeType = photo_tools.getImageMimetype(filename_png);\n            done({\n              image: image,\n              mimeType: mimeType\n            }, null);\n          }\n        });\n      }\n    });\n  });\n  return function retreivePhoto(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar addPhoto = function () {\n  var _ref2 = _asyncToGenerator(function* (image, fileExt, id, done) {\n    var filename = id + fileExt;\n    try {\n      var path = photosDirectory + filename;\n      fs.writeFile(path, image.body, function (err, result) {\n        if (err) {\n          return done(err);\n        } else {\n          console.log(\"RESULT\", result);\n          return done(null);\n        }\n      });\n    } catch (err) {\n      console.log(err);\n      fs.unlink(photosDirectory + filename).catch(function (err) {\n        return done(err);\n      });\n      done(err);\n    }\n  });\n  return function addPhoto(_x3, _x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar deletePhotoIfExists = function () {\n  var _ref3 = _asyncToGenerator(function* (id, done) {\n    var filename_png = photosDirectory + id + \".png\";\n    var filename_jpg = photosDirectory + id + \".jpeg\";\n    fs.exists(filename_png, function (exists) {\n      console.log(\"PNG exists: \", exists, filename_png);\n      if (!exists) {\n        fs.exists(filename_jpg, function (exists) {\n          console.log(\"JPEG exists: \", exists, filename_jpg);\n          if (!exists) {\n            done(null);\n          } else {\n            console.log(\"JPG Exists, time to delete...\");\n            fs.unlink(filename_jpg, function (err) {\n              if (err) {\n                done(err);\n              } else {\n                done(null);\n              }\n            });\n          }\n        });\n      } else {\n        console.log(\"PNG Exists, time to delete...\");\n        fs.unlink(filename_png, function (err) {\n          if (err) {\n            done(err);\n          } else {\n            done(null);\n          }\n        });\n      }\n    });\n  });\n  return function deletePhotoIfExists(_x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar search_users = function search_users(params, user_id, done) {\n  var query = 'SELECT u.user_id, u.given_name, u.family_name, u.email FROM whatsthat_users u ';\n  if (params.q) {\n    query += \"WHERE u.given_name LIKE '%\" + params.q + \"%' OR u.family_name LIKE '%\" + params.q + \"%' OR u.email LIKE '%\" + params.q + \"%' \";\n  }\n  query += \"GROUP BY u.user_id \";\n  if (params.search_in === \"contacts\") {\n    query += 'HAVING u.user_id IN (SELECT c.user_id FROM whatsthat_user_contacts c WHERE c.contact_id=' + user_id + ' AND c.blocked = 0 UNION SELECT c.contact_id FROM whatsthat_user_contacts c WHERE c.user_id=' + user_id + ' AND c.blocked = 0) ';\n  }\n  if (params.limit && params.limit >= 1 && params.limit <= 100) {\n    query += \"LIMIT \" + params.limit + \" \";\n  } else {\n    query += \"LIMIT 20 \";\n  }\n  if (params.offset && params.offset >= 0) {\n    query += \"OFFSET \" + params.offset + \" \";\n  } else {\n    query += \"OFFSET 0 \";\n  }\n  db.all(query, function () {\n    var _ref4 = _asyncToGenerator(function* (err, users) {\n      if (err) {\n        console.log(err);\n        return done(err, false);\n      } else if (users.length == 0) {\n        console.log(\"empty\");\n        return done(err, []);\n      } else {\n        return done(null, users);\n      }\n    });\n    return function (_x9, _x10) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n};\nmodule.exports = {\n  insert: insert,\n  authenticate: authenticate,\n  getToken: getToken,\n  setToken: setToken,\n  removeToken: removeToken,\n  getIdFromToken: getIdFromToken,\n  getOne: getOne,\n  alter: alter,\n  retreivePhoto: retreivePhoto,\n  addPhoto: addPhoto,\n  deletePhotoIfExists: deletePhotoIfExists,\n  search_users: search_users\n};","map":{"version":3,"names":["db","require","crypto","fs","photosDirectory","photo_tools","getHash","password","salt","pbkdf2Sync","toString","insert","user","done","randomBytes","hash","values","first_name","last_name","email","run","err","console","log","lastID","authenticate","get","row","Buffer","from","user_id","getToken","id","token","setToken","removeToken","getIdFromToken","undefined","getOne","query","length","to_return","given_name","family_name","alter","query_string","hasOwnProperty","retreivePhoto","_ref","_asyncToGenerator","filename_png","filename_jpg","exists","readFile","image","mimeType","getImageMimetype","_x","_x2","apply","arguments","addPhoto","_ref2","fileExt","filename","path","writeFile","body","result","unlink","catch","_x3","_x4","_x5","_x6","deletePhotoIfExists","_ref3","_x7","_x8","search_users","params","q","search_in","limit","offset","all","_ref4","users","_x9","_x10","module","exports"],"sources":["C:/Users/bahvd/source/repos/mobileapp/app/models/user.server.models.js"],"sourcesContent":["const db = require('../config/db');\r\nconst crypto = require('crypto');\r\n\r\nconst fs = require('fs');\r\nconst photosDirectory = './storage/';\r\nconst photo_tools = require('../lib/photo.tools.js');\r\n\r\n\r\nconst getHash = function(password, salt){\r\n    return crypto.pbkdf2Sync(password, salt, 100000, 256, 'sha256').toString('hex');\r\n};\r\n\r\n\r\n\r\n/**\r\n * insert user\r\n */\r\nconst insert = function(user, done){\r\n\r\n    const salt = crypto.randomBytes(64);\r\n    const hash = getHash(user.password, salt);\r\n\r\n    //console.log(salt);\r\n\r\n    let values = [user.first_name, user.last_name, user.email, hash, salt.toString('hex')];\r\n\r\n    db.run(\r\n        'INSERT INTO whatsthat_users (given_name, family_name, email, password, salt) VALUES (?,?,?,?,?)',\r\n        values,\r\n        function(err){\r\n            if (err) {\r\n              console.log(err);\r\n              return done(err);\r\n            }\r\n\r\n            return done(err, this.lastID)\r\n        }\r\n    );\r\n};\r\n\r\n\r\n/*\r\n *   authenticate user\r\n */\r\nconst authenticate = function(email, password, done){\r\n    db.get(\r\n        'SELECT user_id, password, salt FROM whatsthat_users WHERE (email=?)',\r\n        [email],\r\n        function(err, row) {\r\n\r\n            if (err || !row){\r\n                console.log(\"AUTH 1\", err, row);\r\n                return done(true); // return error = true (failed auth)\r\n            }else{\r\n\r\n                if(row.salt == null){\r\n                    row.salt = '';\r\n                }\r\n\r\n                let salt = Buffer.from(row.salt, 'hex');\r\n\r\n                if (row.password === getHash(password, salt)){\r\n                    return done(false, row.user_id);\r\n                }else{\r\n                    console.log(\"failed passwd check\");\r\n                    return done(true); // failed password check\r\n                }\r\n\r\n            }\r\n        }\r\n    );\r\n};\r\n\r\n\r\n\r\n/**\r\n * get existing token\r\n *\r\n */\r\nconst getToken = function(id, done){\r\n    db.get(\r\n        'SELECT token FROM whatsthat_users WHERE user_id=?',\r\n        [id],\r\n        function(err, row){\r\n          if (row && row.token){\r\n            return done(null, row.token);\r\n          }else{\r\n            return done(null, null);\r\n          } \r\n        }\r\n    );\r\n};\r\n\r\n\r\n\r\n/**\r\n * create and store a new token for a user\r\n */\r\nconst setToken = function(id, done){\r\n    let token = crypto.randomBytes(16).toString('hex');\r\n    db.run(\r\n        'UPDATE whatsthat_users SET token=? WHERE user_id=?',\r\n        [token, id],\r\n        function(err){return done(err, token)}\r\n    );\r\n};\r\n\r\n\r\n\r\n/**\r\n * remove a token for a user\r\n */\r\nconst removeToken = (token, done) => {\r\n    db.run(\r\n        'UPDATE whatsthat_users SET token=null WHERE token=?',\r\n        [token],\r\n        function(err){return done(err)}\r\n    )\r\n};\r\n\r\n\r\n\r\n/**\r\n * get the user id associated with a given token, return null if not found\r\n */\r\nconst getIdFromToken = (token, done) => {\r\n    if (token === undefined || token === null)\r\n        return done(true, null);\r\n    else {\r\n        db.get(\r\n            'SELECT user_id FROM whatsthat_users WHERE token=?',\r\n            [token],\r\n            function(err, row){\r\n                if (row)\r\n                    return done(null, row.user_id);\r\n                return done(err, null);\r\n            }\r\n        )\r\n    }\r\n};\r\n\r\n\r\n\r\n/**\r\n * return user details, or null if user not found\r\n *\r\n * @param id\r\n * @param done\r\n */\r\nconst getOne = (id, done) => {\r\n    let query = 'SELECT user_id, given_name, family_name, email FROM whatsthat_users WHERE user_id=?';\r\n    db.get(\r\n        query,\r\n        [id],\r\n        function(err, row){\r\n            if (err){\r\n                console.log(err);\r\n                return done(err, false);\r\n            }\r\n            \r\n            if(!row || row.length == 0){\r\n                //console.log(row.length == 0);\r\n                return done(false, null);\r\n            }\r\n            \r\n            let user = row;\r\n  \r\n            let to_return = {\r\n                \"user_id\": user.user_id,\r\n                \"first_name\": user.given_name,\r\n                \"last_name\": user.family_name,\r\n                \"email\": user.email\r\n            };\r\n\r\n            return done(null, to_return);\r\n  \r\n        }\r\n    )\r\n};\r\n\r\n\r\n\r\n/**\r\n * update user\r\n *\r\n */\r\nconst alter = (id, user, done) => {\r\n\r\n    let query_string = '';\r\n    let values = [];\r\n\r\n    if(user.hasOwnProperty('password')){\r\n        const salt = crypto.randomBytes(64);\r\n        const hash = getHash(user.password, salt);\r\n\r\n        query_string = 'UPDATE whatsthat_users SET given_name=?, family_name=?, email=?, password=?, salt=? WHERE user_id=?';\r\n        values = [user.first_name, user.last_name, user.email, hash, salt.toString('hex'), id];\r\n    }else{\r\n        query_string = 'UPDATE whatsthat_users SET given_name=?, family_name=?, email=? WHERE user_id=?';\r\n        values = [user.first_name, user.last_name, user.email, id];\r\n    }\r\n\r\n    db.run(query_string,\r\n        values,\r\n        function(err){\r\n            done(err);\r\n        }\r\n    );\r\n};\r\n\r\n\r\n\r\nconst retreivePhoto = async (id, done) => {\r\n    let filename_png = photosDirectory + id + \".png\";\r\n    let filename_jpg = photosDirectory + id + \".jpeg\";\r\n  \r\n    fs.exists(filename_png, (exists) => {\r\n        console.log(\"PNG exists: \", exists, filename_png);\r\n        if(!exists){\r\n            fs.exists(filename_jpg, (exists) => {\r\n                console.log(\"JPEG exists: \", exists, filename_jpg);\r\n          \r\n                if(!exists){\r\n                    filename_jpg = photosDirectory + \"default.jpeg\";\r\n                }\r\n  \r\n                console.log(\"JPG Exists, time to read...\");\r\n  \r\n                fs.readFile(filename_jpg, (err, image) => {\r\n                    if(err){\r\n                        console.log(err);\r\n                        done(null, err);\r\n                    }else{\r\n                        let mimeType = photo_tools.getImageMimetype(filename_jpg);\r\n                        done({image, mimeType}, null);\r\n                    }\r\n                });\r\n            });\r\n        }else{\r\n            console.log(\"PNG Exists, time to read...\");\r\n  \r\n            fs.readFile(filename_png, (err, image) => {\r\n                if(err){\r\n                    done(null, err);\r\n                }else{\r\n                    let mimeType = photo_tools.getImageMimetype(filename_png);\r\n                    done({image, mimeType}, null);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nconst addPhoto = async function(image, fileExt, id, done){\r\n    let filename = id + fileExt;\r\n  \r\n    try{\r\n        const path = photosDirectory + filename;\r\n  \r\n        fs.writeFile(path, image.body, function(err, result){\r\n            if(err){\r\n                return done(err);\r\n            }else{\r\n                console.log(\"RESULT\", result);\r\n                return done(null);\r\n            }\r\n        });\r\n    }catch (err){\r\n        console.log(err);\r\n        fs.unlink(photosDirectory + filename).catch(err => done(err));\r\n        done(err);\r\n    }\r\n}\r\n\r\n\r\n\r\nconst deletePhotoIfExists = async function(id, done){\r\n    let filename_png = photosDirectory + id + \".png\";\r\n    let filename_jpg = photosDirectory + id + \".jpeg\";\r\n  \r\n    fs.exists(filename_png, (exists) => {\r\n        console.log(\"PNG exists: \", exists, filename_png);\r\n        if(!exists){\r\n            fs.exists(filename_jpg, (exists) => {\r\n                console.log(\"JPEG exists: \", exists, filename_jpg);\r\n                if(!exists){\r\n                    done(null);\r\n                }else{\r\n                    console.log(\"JPG Exists, time to delete...\");\r\n                    fs.unlink(filename_jpg, (err) => {\r\n                        if(err){\r\n                            done(err);\r\n                        }else{\r\n                            done(null);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }else{\r\n            console.log(\"PNG Exists, time to delete...\");\r\n            fs.unlink(filename_png, (err) => {\r\n                if(err){\r\n                    done(err);\r\n                }else{\r\n                    done(null);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nconst search_users = (params, user_id, done) => {\r\n    let query = 'SELECT u.user_id, u.given_name, u.family_name, u.email FROM whatsthat_users u ';\r\n\r\n    if(params.q){\r\n        query += \"WHERE u.given_name LIKE '%\" + params.q + \"%' OR u.family_name LIKE '%\" + params.q + \"%' OR u.email LIKE '%\" + params.q + \"%' \";\r\n    }\r\n\r\n    query += \"GROUP BY u.user_id \"\r\n\r\n    if(params.search_in === \"contacts\"){\r\n        query += 'HAVING u.user_id IN (SELECT c.user_id FROM whatsthat_user_contacts c WHERE c.contact_id=' + user_id + ' AND c.blocked = 0 UNION SELECT c.contact_id FROM whatsthat_user_contacts c WHERE c.user_id=' + user_id + ' AND c.blocked = 0) '\r\n    }\r\n\r\n    if(params.limit && params.limit >= 1 && params.limit <= 100){\r\n        query += \"LIMIT \" + params.limit + \" \";\r\n    }else{\r\n        query += \"LIMIT 20 \";\r\n    }\r\n    \r\n    if(params.offset && params.offset >= 0){\r\n        query += \"OFFSET \" + params.offset + \" \";\r\n    }else{\r\n        query += \"OFFSET 0 \";\r\n    }\r\n\r\n    db.all(\r\n        query,\r\n        async function(err, users){\r\n            if(err){\r\n                console.log(err);\r\n                return done(err, false);\r\n            }else if(users.length ==0){\r\n                console.log(\"empty\");\r\n                return done(err, []);\r\n            }else{\r\n                return done(null, users);\r\n            }\r\n        }\r\n    ); \r\n}\r\n\r\nmodule.exports = {\r\n    insert,\r\n    authenticate,\r\n    getToken,\r\n    setToken,\r\n    removeToken,\r\n    getIdFromToken,\r\n    getOne,\r\n    alter,\r\n    retreivePhoto,\r\n    addPhoto,\r\n    deletePhotoIfExists,\r\n    search_users\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}