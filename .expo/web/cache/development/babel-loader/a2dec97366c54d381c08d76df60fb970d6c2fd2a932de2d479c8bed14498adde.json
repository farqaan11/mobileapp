{"ast":null,"code":"var db = require(\"../config/db\");\nvar insert = function insert(chat, user_id, done) {\n  var values = [chat.name, user_id];\n  db.run('INSERT INTO whatsthat_chats (name, creator) VALUES (?,?)', values, function (err) {\n    if (err) {\n      console.log(err);\n      return done(err);\n    }\n    var chat_id = this.lastID;\n    db.run('INSERT INTO whatsthat_chat_users (chat_id, user_id) VALUES (?,?)', [chat_id, user_id], function (err) {\n      if (err) {\n        console.log(err);\n        return done(err);\n      }\n      return done(err, chat_id);\n    });\n  });\n};\nvar get_single_chat = function get_single_chat(chat_id, done) {\n  var chat_details = {};\n  db.get(\"SELECT * FROM whatsthat_chats WHERE chat_id = ?\", [chat_id], function (err, chat) {\n    if (err) return done(err);\n    if (!chat) return done(404);\n    chat_details[\"name\"] = chat.name;\n    console.log(1, chat_details);\n    db.get(\"SELECT * FROM whatsthat_users WHERE user_id = ?\", [chat.creator], function (err, creator) {\n      if (err) return done(err);\n      if (!creator) return done(404);\n      chat_details[\"creator\"] = {\n        \"user_id\": creator.user_id,\n        \"first_name\": creator.given_name,\n        \"last_name\": creator.family_name,\n        \"email\": creator.email\n      };\n      console.log(2, chat_details);\n      var members = [];\n      var member_errors = [];\n      db.each(\"SELECT u.user_id AS user_id, \\n                                u.given_name AS first_name,\\n                                u.family_name AS last_name,\\n                                u.email AS email\\n                         FROM whatsthat_users u, whatsthat_chat_users c\\n                         WHERE c.chat_id = ?\\n                         AND c.user_id = u.user_id\", [chat_id], function (err, row) {\n        if (err) member_errors.push(err);\n        members.push(row);\n      }, function (err) {\n        if (err) return done(err);\n        if (member_errors.length > 0) return done(member_errors);\n        chat_details[\"members\"] = members;\n        console.log(3, chat_details);\n        var messages = [];\n        var message_errors = [];\n        var query = \"SELECT m.message_id, m.timestamp, m.message, u.user_id, u.given_name, u.family_name, u.email\\n                                         FROM whatsthat_messages m, whatsthat_users u\\n                                         WHERE m.chat_id = ? \\n                                         AND m.author = u.user_id\\n                                         ORDER BY timestamp DESC\";\n        db.each(query, [chat_id], function (err, row) {\n          if (err) message_errors.push(err);\n          messages.push({\n            \"message_id\": row.message_id,\n            \"timestamp\": row.timestamp,\n            \"message\": row.message,\n            \"author\": {\n              \"user_id\": row.user_id,\n              \"first_name\": row.given_name,\n              \"last_name\": row.family_name,\n              \"email\": row.email\n            }\n          });\n        }, function (err) {\n          if (err) return done(err);\n          if (message_errors.length > 0) return done(message_errors);\n          chat_details[\"messages\"] = messages;\n          console.log(4, chat_details);\n          return done(null, chat_details);\n        });\n      });\n    });\n  });\n};\nvar add_user_to_chat = function add_user_to_chat(chat_id, user_id, done) {\n  var values = [chat_id, user_id];\n  db.run('INSERT INTO whatsthat_chat_users (chat_id, user_id) VALUES (?,?)', values, function (err) {\n    if (err) {\n      console.log(err);\n      return done(err);\n    }\n    return done(err, this.lastID);\n  });\n};\nvar remove_user_from_chat = function remove_user_from_chat(chat_id, user_id, done) {\n  var values = [chat_id, user_id];\n  db.run('DELETE FROM whatsthat_chat_users WHERE chat_id = ? AND user_id = ?', values, function (err) {\n    db.all(\"SELECT * FROM whatsthat_chat_users WHERE chat_id = ?\", [chat_id], function (err, rows) {\n      if (err) return done(err);\n      if (rows.length > 0) {\n        return done(null);\n      }\n      db.run(\"DELETE FROM whatsthat_messages WHERE chat_id = ?\", [chat_id], function (err) {\n        if (err) return done(err);\n        db.run(\"DELETE FROM whatsthat_chats WHERE chat_id = ?\", [chat_id], function (err) {\n          return done(err);\n        });\n      });\n    });\n  });\n};\nvar get_last_message = function get_last_message(chat_id) {\n  return new Promise(function (resolve, reject) {\n    var last_message_query = \"\\n            SELECT m.message_id, m.timestamp, m.message, m.author, mu.user_id AS \\\"author_user_id\\\", mu.given_name AS \\\"author_first_name\\\", mu.family_name AS \\\"author_last_name\\\", mu.email AS \\\"author_email\\\" \\n            FROM whatsthat_messages m, whatsthat_users mu\\n            WHERE m.chat_id = ?\\n            AND mu.user_id = m.author\\n            GROUP BY m.chat_id\\n            HAVING MAX(m.timestamp)\\n        \";\n    db.get(last_message_query, [chat_id], function (err, last_message_details) {\n      if (err) return reject(err);\n      if (!last_message_details || last_message_details === null) {\n        resolve({});\n      } else {\n        resolve({\n          \"message_id\": last_message_details.message_id,\n          \"timestamp\": last_message_details.timestamp,\n          \"message\": last_message_details.message,\n          \"author\": {\n            \"user_id\": last_message_details.author_user_id,\n            \"first_name\": last_message_details.author_first_name,\n            \"last_name\": last_message_details.author_last_name,\n            \"email\": last_message_details.author_email\n          }\n        });\n      }\n    });\n  });\n};\nvar get_all_chats = function get_all_chats(user_id, done) {\n  var chats = [];\n  var errors = [];\n  var chats_query = \"\\n        SELECT c.chat_id, c.name, c.creator, u.user_id, u.given_name, u.family_name, u.email\\n        FROM whatsthat_chats c, whatsthat_users u\\n        WHERE c.chat_id IN (SELECT chat_id from whatsthat_chat_users WHERE user_id = ?)\\n        AND c.creator = u.user_id\";\n  db.each(chats_query, [user_id], function (err, chat_details) {\n    if (err) errors.push(err);\n    var chat_object = {\n      \"chat_id\": chat_details.chat_id,\n      \"name\": chat_details.name,\n      \"creator\": {\n        \"user_id\": chat_details.user_id,\n        \"first_name\": chat_details.given_name,\n        \"last_name\": chat_details.family_name,\n        \"email\": chat_details.email\n      }\n    };\n    chats.push(chat_object);\n  }, function (err) {\n    if (err) return done(err, null);\n    if (errors.length > 0) return done(errors, null);\n    var counter = 0;\n    chats.forEach(function (chat) {\n      get_last_message(chat.chat_id).then(function (last_message) {\n        chat[\"last_message\"] = last_message;\n        counter++;\n        if (counter === chats.length) {\n          return done(null, chats);\n        }\n      }).catch(function (err) {\n        return done(err, null);\n      });\n    });\n  });\n};\nvar update_chat = function update_chat(chat_id, chat, done) {\n  db.run(\"UPDATE whatsthat_chats SET name=? WHERE chat_id=?\", [chat.name, chat_id], function (err) {\n    done(err);\n  });\n};\nvar send_message = function send_message(chat_id, message, author_id, done) {\n  db.run(\"INSERT INTO whatsthat_messages (chat_id, message, timestamp, author) VALUES (?,?,?,?)\", [chat_id, message.message, new Date(), author_id], function (err) {\n    done(err);\n  });\n};\nvar update_message = function update_message(chat_id, message_id, message, author_id, done) {\n  db.get(\"SELECT * FROM whatsthat_messages WHERE message_id = ? AND chat_id = ?\", [message_id, chat_id], function (err, row) {\n    if (err) return done(err);\n    if (!row) return done(404);\n    if (row.author != author_id) return done(403);\n    db.run(\"UPDATE whatsthat_messages SET message = ? WHERE message_id = ?\", [message.message, message_id], function (err) {\n      done(err);\n    });\n  });\n};\nvar delete_message = function delete_message(chat_id, message_id, author_id, done) {\n  db.get(\"SELECT * FROM whatsthat_messages WHERE message_id = ? AND chat_id = ?\", [message_id, chat_id], function (err, row) {\n    if (err) return done(err);\n    if (!row) return done(404);\n    if (row.author != author_id) return done(403);\n    db.run(\"DELETE FROM whatsthat_messages WHERE message_id = ?\", [message_id], function (err) {\n      done(err);\n    });\n  });\n};\nmodule.exports = {\n  insert: insert,\n  add_user_to_chat: add_user_to_chat,\n  get_single_chat: get_single_chat,\n  get_all_chats: get_all_chats,\n  remove_user_from_chat: remove_user_from_chat,\n  update_chat: update_chat,\n  send_message: send_message,\n  update_message: update_message,\n  delete_message: delete_message\n};","map":{"version":3,"names":["db","require","insert","chat","user_id","done","values","name","run","err","console","log","chat_id","lastID","get_single_chat","chat_details","get","creator","given_name","family_name","email","members","member_errors","each","row","push","length","messages","message_errors","query","message_id","timestamp","message","add_user_to_chat","remove_user_from_chat","all","rows","get_last_message","Promise","resolve","reject","last_message_query","last_message_details","author_user_id","author_first_name","author_last_name","author_email","get_all_chats","chats","errors","chats_query","chat_object","counter","forEach","then","last_message","catch","update_chat","send_message","author_id","Date","update_message","author","delete_message","module","exports"],"sources":["C:/Users/bahvd/source/repos/mobileapp/app/models/chat.server.models.js"],"sourcesContent":["const db = require('../config/db');\r\n\r\n\r\n/**\r\n * insert chat\r\n */\r\nconst insert = (chat, user_id, done) => {\r\n\r\n    let values = [chat.name, user_id];\r\n\r\n    db.run(\r\n        'INSERT INTO whatsthat_chats (name, creator) VALUES (?,?)',\r\n        values,\r\n        function(err){\r\n            if (err) {\r\n              console.log(err);\r\n              return done(err);\r\n            }\r\n\r\n            let chat_id = this.lastID;\r\n\r\n            db.run(\r\n                'INSERT INTO whatsthat_chat_users (chat_id, user_id) VALUES (?,?)',\r\n                [chat_id, user_id],\r\n                function(err){\r\n                    if (err) {\r\n                      console.log(err);\r\n                      return done(err);\r\n                    }\r\n        \r\n                    return done(err, chat_id)\r\n                }\r\n            );\r\n        }\r\n    );\r\n};\r\n\r\n\r\nconst get_single_chat = (chat_id, done) => {\r\n\r\n    let chat_details = {}\r\n\r\n    db.get(\r\n        \"SELECT * FROM whatsthat_chats WHERE chat_id = ?\",\r\n        [chat_id],\r\n        function(err, chat){\r\n            if(err) return done(err);\r\n            if(!chat) return done(404);\r\n\r\n            chat_details[\"name\"] = chat.name;\r\n\r\n            console.log(1, chat_details)\r\n            \r\n\r\n            db.get(\r\n                \"SELECT * FROM whatsthat_users WHERE user_id = ?\",\r\n                [chat.creator],\r\n                function(err, creator){\r\n                    if(err) return done(err);\r\n                    if(!creator) return done(404);\r\n                    \r\n                    chat_details[\"creator\"] = {\r\n                        \"user_id\": creator.user_id,\r\n                        \"first_name\": creator.given_name,\r\n                        \"last_name\": creator.family_name,\r\n                        \"email\": creator.email\r\n                    }\r\n\r\n                    console.log(2, chat_details)\r\n\r\n                    let members = [];\r\n                    let member_errors = [];\r\n\r\n                    db.each(\r\n                        `SELECT u.user_id AS user_id, \r\n                                u.given_name AS first_name,\r\n                                u.family_name AS last_name,\r\n                                u.email AS email\r\n                         FROM whatsthat_users u, whatsthat_chat_users c\r\n                         WHERE c.chat_id = ?\r\n                         AND c.user_id = u.user_id`,\r\n                        [chat_id],\r\n                        (err, row) => {\r\n                            if(err) member_errors.push(err);\r\n\r\n                            members.push(row);\r\n                        },\r\n                        (err) => {\r\n                            if(err) return done(err);\r\n                            if(member_errors.length > 0) return done(member_errors)\r\n\r\n                            chat_details[\"members\"] = members;\r\n\r\n                            console.log(3, chat_details)\r\n                            \r\n                            //messages\r\n                            let messages = [];\r\n                            let message_errors = [];\r\n\r\n                            let query = `SELECT m.message_id, m.timestamp, m.message, u.user_id, u.given_name, u.family_name, u.email\r\n                                         FROM whatsthat_messages m, whatsthat_users u\r\n                                         WHERE m.chat_id = ? \r\n                                         AND m.author = u.user_id\r\n                                         ORDER BY timestamp DESC`;\r\n                                \r\n\r\n                            db.each(\r\n                                query,\r\n                                [chat_id],\r\n                                (err, row) => {\r\n                                    if(err) message_errors.push(err);\r\n\r\n                                    messages.push({\r\n                                        \"message_id\": row.message_id,\r\n                                        \"timestamp\": row.timestamp,\r\n                                        \"message\": row.message,\r\n                                        \"author\": {\r\n                                            \"user_id\": row.user_id,\r\n                                            \"first_name\": row.given_name,\r\n                                            \"last_name\": row.family_name,\r\n                                            \"email\": row.email\r\n                                        }\r\n                                    });\r\n                                },\r\n                                (err) => {\r\n                                    if(err) return done(err);\r\n                                    if(message_errors.length > 0) return done(message_errors)\r\n\r\n                                    chat_details[\"messages\"] = messages;\r\n\r\n                                    console.log(4, chat_details)\r\n                                    return done(null, chat_details)\r\n                                }\r\n                            ) \r\n                        }\r\n                    )\r\n                }\r\n            )\r\n        }\r\n    )\r\n}\r\n\r\n\r\n\r\nconst add_user_to_chat = (chat_id, user_id, done) => {\r\n    let values = [chat_id, user_id];\r\n\r\n    db.run(\r\n        'INSERT INTO whatsthat_chat_users (chat_id, user_id) VALUES (?,?)',\r\n        values,\r\n        function(err){\r\n            if (err) {\r\n              console.log(err);\r\n              return done(err);\r\n            }\r\n\r\n            return done(err, this.lastID)\r\n        }\r\n    );  \r\n}\r\n\r\n\r\n\r\nconst remove_user_from_chat = (chat_id, user_id, done) => {\r\n    let values = [chat_id, user_id];\r\n\r\n    db.run(\r\n        'DELETE FROM whatsthat_chat_users WHERE chat_id = ? AND user_id = ?',\r\n        values,\r\n        function(err){\r\n            \r\n            // If the chat has no users, delete the chat too (and messages)\r\n            db.all(\r\n                \"SELECT * FROM whatsthat_chat_users WHERE chat_id = ?\",\r\n                [chat_id],\r\n                (err, rows) => {\r\n                    if(err) return done(err);\r\n\r\n                    if(rows.length > 0){\r\n                        //still has members, do nothing\r\n                        return done(null)\r\n                    }\r\n\r\n                    db.run(\r\n                        \"DELETE FROM whatsthat_messages WHERE chat_id = ?\",\r\n                        [chat_id],\r\n                        (err) => {\r\n                            if(err) return done(err)\r\n\r\n                            db.run(\r\n                                \"DELETE FROM whatsthat_chats WHERE chat_id = ?\",\r\n                                [chat_id],\r\n                                (err) => {\r\n                                    return done(err)\r\n                                }\r\n                            )\r\n                        }\r\n                    )\r\n\r\n                }\r\n            )\r\n        }\r\n    );  \r\n}\r\n\r\n\r\n\r\n// const get_chat_info = (user_id) => {\r\n//     return new Promise((resolve, reject) => {\r\n\r\n//         const query = `SELECT cu.chat_id, c.name, c.creator, u.user_id, u.given_name, u.family_name, u.email, m.message_id, m.timestamp, m.message, m.author, mu.user_id AS \"author_user_id\", mu.given_name AS \"author_first_name\", mu.family_name AS \"author_last_name\", mu.email AS \"author_email\" \r\n//         FROM whatsthat_chat_users cu, whatsthat_chats c, whatsthat_users u, whatsthat_messages m, whatsthat_users mu\r\n//         WHERE cu.user_id = ?\r\n//         AND cu.chat_id = c.chat_id\r\n//         AND c.creator = u.user_id\r\n//         AND m.chat_id = c.chat_id  \r\n//         AND m.author = mu.user_id\r\n//         GROUP BY c.chat_id\r\n//         HAVING MAX(m.timestamp)            \r\n//         `;\r\n\r\n//         let results = [];\r\n\r\n//         db.all(query, [user_id], (err, rows) => {\r\n//             console.log(err, rows)\r\n\r\n//             if(err) reject(err)\r\n\r\n//             rows.forEach((row) => {\r\n//                 results.push({\r\n//                     \"chat_id\": row.chat_id,\r\n//                     \"name\": row.name,\r\n//                     \"creator\": {\r\n//                         \"user_id\": row.user_id,\r\n//                         \"first_name\": row.given_name,\r\n//                         \"last_name\": row.family_name,\r\n//                         \"email\": row.email\r\n//                     },\r\n//                     \"last_message\": {\r\n//                         \"message_id\": row.message_id,\r\n//                         \"timestamp\": row.timestamp,\r\n//                         \"message\": row.message,\r\n//                         \"author\": {\r\n//                             \"user_id\": row.author_user_id,\r\n//                             \"first_name\": row.author_first_name,\r\n//                             \"last_name\": row.author_last_name,\r\n//                             \"email\": row.author_email\r\n//                         }\r\n//                     }\r\n\r\n//                 })\r\n\r\n//             })\r\n//             resolve(results)\r\n//         })\r\n//     })\r\n// }\r\n\r\n// const get_all_chats = (user_id, done) => {\r\n//     get_chat_info(user_id)\r\n//     .then((data) => {\r\n//         return done(null, data)\r\n//     })\r\n//     .catch((err) => {\r\n//         return done(err, null)\r\n//     })\r\n// }\r\n\r\nconst get_last_message = (chat_id) => {\r\n    return new Promise((resolve, reject) => {\r\n        let last_message_query = `\r\n            SELECT m.message_id, m.timestamp, m.message, m.author, mu.user_id AS \"author_user_id\", mu.given_name AS \"author_first_name\", mu.family_name AS \"author_last_name\", mu.email AS \"author_email\" \r\n            FROM whatsthat_messages m, whatsthat_users mu\r\n            WHERE m.chat_id = ?\r\n            AND mu.user_id = m.author\r\n            GROUP BY m.chat_id\r\n            HAVING MAX(m.timestamp)\r\n        `;\r\n\r\n        db.get(last_message_query, [chat_id], (err, last_message_details) => {\r\n            if(err) return reject(err)\r\n\r\n            if(!last_message_details || last_message_details === null){\r\n                resolve({})\r\n            }else{\r\n                resolve({\r\n                    \"message_id\": last_message_details.message_id,\r\n                    \"timestamp\": last_message_details.timestamp,\r\n                    \"message\": last_message_details.message,\r\n                    \"author\": {\r\n                        \"user_id\": last_message_details.author_user_id,\r\n                        \"first_name\": last_message_details.author_first_name,\r\n                        \"last_name\": last_message_details.author_last_name,\r\n                        \"email\": last_message_details.author_email\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nconst get_all_chats = (user_id, done) => {\r\n    let chats = [];\r\n    let errors = [];\r\n\r\n    let chats_query = `\r\n        SELECT c.chat_id, c.name, c.creator, u.user_id, u.given_name, u.family_name, u.email\r\n        FROM whatsthat_chats c, whatsthat_users u\r\n        WHERE c.chat_id IN (SELECT chat_id from whatsthat_chat_users WHERE user_id = ?)\r\n        AND c.creator = u.user_id`;\r\n\r\n    db.each(\r\n        chats_query, \r\n        [user_id],\r\n        (err, chat_details) => {\r\n            if(err) errors.push(err);\r\n\r\n            let chat_object = {\r\n                \"chat_id\": chat_details.chat_id,\r\n                \"name\": chat_details.name,\r\n                \"creator\": {\r\n                    \"user_id\": chat_details.user_id,\r\n                    \"first_name\": chat_details.given_name,\r\n                    \"last_name\": chat_details.family_name,\r\n                    \"email\": chat_details.email\r\n                }\r\n            }\r\n\r\n            chats.push(chat_object)\r\n            \r\n        },\r\n        (err) => {\r\n            if(err) return done(err, null);\r\n            if(errors.length > 0) return done(errors, null)\r\n\r\n            let counter = 0;\r\n\r\n            chats.forEach((chat) => {\r\n                get_last_message(chat.chat_id)\r\n                .then((last_message) => {\r\n                    chat[\"last_message\"] = last_message\r\n\r\n                    counter ++;\r\n                    if(counter === chats.length){\r\n                        return done(null, chats)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    return done(err, null)\r\n                })\r\n            }) \r\n        }\r\n    )\r\n}\r\n\r\n\r\n\r\nconst update_chat = (chat_id, chat, done) => {\r\n    db.run(\"UPDATE whatsthat_chats SET name=? WHERE chat_id=?\",\r\n        [chat.name, chat_id],\r\n        function(err){\r\n            done(err);\r\n        }\r\n    );\r\n}\r\n\r\n\r\n\r\nconst send_message = (chat_id, message, author_id, done) => {\r\n\r\n    db.run(\"INSERT INTO whatsthat_messages (chat_id, message, timestamp, author) VALUES (?,?,?,?)\",\r\n        [chat_id, message.message, new Date(), author_id],\r\n        function(err){\r\n            done(err);\r\n        }\r\n    );\r\n}\r\n\r\n\r\n\r\nconst update_message = (chat_id, message_id, message, author_id, done) => {\r\n\r\n    db.get(\"SELECT * FROM whatsthat_messages WHERE message_id = ? AND chat_id = ?\",\r\n        [message_id, chat_id],\r\n        (err, row) => {\r\n            if(err) return done(err);\r\n            if(!row) return done(404)\r\n            if(row.author != author_id) return done(403)\r\n\r\n            db.run(\"UPDATE whatsthat_messages SET message = ? WHERE message_id = ?\",\r\n                [message.message, message_id],\r\n                function(err){\r\n                    done(err);\r\n                }\r\n            );\r\n        }\r\n    )  \r\n}\r\n\r\n\r\n\r\nconst delete_message = (chat_id, message_id, author_id, done) => {\r\n\r\n    db.get(\"SELECT * FROM whatsthat_messages WHERE message_id = ? AND chat_id = ?\",\r\n        [message_id, chat_id],\r\n        (err, row) => {\r\n            if(err) return done(err);\r\n            if(!row) return done(404)\r\n            if(row.author != author_id) return done(403)\r\n\r\n            db.run(\"DELETE FROM whatsthat_messages WHERE message_id = ?\",\r\n                [message_id],\r\n                function(err){\r\n                    done(err);\r\n                }\r\n            );\r\n        }\r\n    )  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    insert,\r\n    add_user_to_chat,\r\n    get_single_chat,\r\n    get_all_chats,\r\n    remove_user_from_chat,\r\n    update_chat,\r\n    send_message,\r\n    update_message,\r\n    delete_message\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}