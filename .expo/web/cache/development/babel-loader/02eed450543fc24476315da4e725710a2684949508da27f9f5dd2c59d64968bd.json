{"ast":null,"code":"var contacts = require(\"../models/contact.server.models\"),\n  users = require(\"../models/user.server.models\"),\n  log = require(\"../lib/logger\")(),\n  validator = require(\"../lib/validator\"),\n  config = require(\"../config/config.js\"),\n  schema = require('../config/' + config.get('specification'));\nvar get_contacts = function get_contacts(req, res) {\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, id) {\n    if (err) {\n      log.warn(\"contacts.controller.get_contacts: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    contacts.get_contacts(id, function (err, results) {\n      if (err) {\n        log.warn(\"contacts.controller.get_contacts: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!results) {\n        return res.status(200).json([]);\n      }\n      return res.status(200).json(results);\n    });\n  });\n};\nvar add_contact = function add_contact(req, res) {\n  var id = parseInt(req.params.user_id);\n  if (!validator.isValidId(id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"contacts.controller.add_contact: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    if (id === _id) {\n      return res.status(400).send(\"You can't add yourself as a contact\");\n    }\n    users.getOne(id, function (err, user) {\n      if (err) {\n        log.warn(\"contacts.controller.add_contact: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!user) {\n        return res.sendStatus(404);\n      }\n      contacts.add_contact(_id, id, function (err) {\n        if (err) {\n          if (err.errno === 19) {\n            return res.status(200).send(\"Already a contact\");\n          }\n          log.warn(\"contacts.controller.add_contact: \" + JSON.stringify(err));\n          return res.sendStatus(500);\n        }\n        return res.sendStatus(200);\n      });\n    });\n  });\n};\nvar remove_contact = function remove_contact(req, res) {\n  var id = parseInt(req.params.user_id);\n  if (!validator.isValidId(id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"contacts.controller.remove_contact: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    if (id === _id) {\n      return res.status(400).send(\"You can't remove yourself as a contact\");\n    }\n    users.getOne(id, function (err, user) {\n      if (err) {\n        log.warn(\"contacts.controller.remove_contact: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!user) {\n        return res.sendStatus(404);\n      }\n      contacts.remove_contact(_id, id, function (err) {\n        if (err) {\n          log.warn(\"contacts.controller.remove_contact: \" + JSON.stringify(err));\n          return res.sendStatus(500);\n        }\n        return res.sendStatus(200);\n      });\n    });\n  });\n};\nvar get_blocked = function get_blocked(req, res) {\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, id) {\n    if (err) {\n      log.warn(\"contacts.controller.get_blocked: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    contacts.get_blocked(id, function (err, results) {\n      if (err) {\n        log.warn(\"contacts.controller.get_blocked: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!results) {\n        return res.status(200).json([]);\n      }\n      return res.status(200).json(results);\n    });\n  });\n};\nvar block_contact = function block_contact(req, res) {\n  var id = parseInt(req.params.user_id);\n  if (!validator.isValidId(id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"contacts.controller.block_contact: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    if (id === _id) {\n      return res.status(400).send(\"You can't block yourself\");\n    }\n    users.getOne(id, function (err, user) {\n      if (err) {\n        log.warn(\"contacts.controller.block_contact: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!user) {\n        return res.sendStatus(404);\n      }\n      contacts.is_contact(_id, id, function (err, record) {\n        if (err) {\n          return res.sendStatus(500);\n        }\n        if (!record) {\n          return res.status(400).send(\"Can't block a user who isn't in your contacts list\");\n        }\n        contacts.block_contact(_id, id, function (err) {\n          if (err) {\n            log.warn(\"contacts.controller.block_contact: \" + JSON.stringify(err));\n            return res.sendStatus(500);\n          }\n          return res.sendStatus(200);\n        });\n      });\n    });\n  });\n};\nvar unblock_contact = function unblock_contact(req, res) {\n  var id = parseInt(req.params.user_id);\n  if (!validator.isValidId(id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"contacts.controller.unblock_contact: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    if (id === _id) {\n      return res.status(400).send(\"You can't block yourself\");\n    }\n    users.getOne(id, function (err, user) {\n      if (err) {\n        log.warn(\"contacts.controller.unblock_contact: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!user) {\n        return res.sendStatus(404);\n      }\n      contacts.is_contact(_id, id, function (err, record) {\n        if (err) {\n          return res.sendStatus(500);\n        }\n        if (!record) {\n          return res.status(400).send(\"Can't block a user who isn't in your contacts list\");\n        }\n        contacts.unblock_contact(_id, id, function (err) {\n          if (err) {\n            log.warn(\"contacts.controller.unblock_contact: \" + JSON.stringify(err));\n            return res.sendStatus(500);\n          }\n          return res.sendStatus(200);\n        });\n      });\n    });\n  });\n};\nmodule.exports = {\n  get_contacts: get_contacts,\n  add_contact: add_contact,\n  remove_contact: remove_contact,\n  get_blocked: get_blocked,\n  block_contact: block_contact,\n  unblock_contact: unblock_contact\n};","map":{"version":3,"names":["contacts","require","users","log","validator","config","schema","get","get_contacts","req","res","token","getIdFromToken","err","id","warn","JSON","stringify","sendStatus","results","status","json","add_contact","parseInt","params","user_id","isValidId","_id","send","getOne","user","errno","remove_contact","get_blocked","block_contact","is_contact","record","unblock_contact","module","exports"],"sources":["C:/Users/bahvd/source/repos/mobileapp/app/controllers/contact.server.controllers.js"],"sourcesContent":["const\r\n  contacts = require('../models/contact.server.models'),\r\n  users = require('../models/user.server.models'),\r\n  log = require('../lib/logger')(),\r\n  validator = require('../lib/validator'),\r\n  config = require('../config/config.js'),\r\n  schema = require('../config/' + config.get('specification'));\r\n\r\n\r\nconst get_contacts = (req, res) => {\r\n    let token = req.get(config.get('authToken'));\r\n\r\n    users.getIdFromToken(token, (err, id) => {\r\n        if(err){\r\n            log.warn(`contacts.controller.get_contacts: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        contacts.get_contacts(id, (err, results) => {\r\n            if(err){\r\n                log.warn(`contacts.controller.get_contacts: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500);\r\n            }\r\n\r\n            if(!results){\r\n                return res.status(200).json([]);\r\n            }\r\n\r\n            return res.status(200).json(results);\r\n        })\r\n    });\r\n}\r\n\r\nconst add_contact = (req, res) => {\r\n\r\n    let id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(id)) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`contacts.controller.add_contact: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        if(id === _id){\r\n            return res.status(400).send(\"You can't add yourself as a contact\")\r\n        }\r\n\r\n        users.getOne(id, (err, user) => {\r\n            if(err){\r\n                log.warn(`contacts.controller.add_contact: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500);\r\n            }\r\n        \r\n            if(!user){\r\n                return res.sendStatus(404);\r\n            }\r\n\r\n            contacts.add_contact(_id, id, (err) => {\r\n                if(err) {\r\n                    if(err.errno === 19){\r\n                        return res.status(200).send(\"Already a contact\")\r\n                    }\r\n                    log.warn(`contacts.controller.add_contact: ${JSON.stringify(err)}`);\r\n                    return res.sendStatus(500);\r\n                }\r\n\r\n                return res.sendStatus(200);\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\nconst remove_contact = (req, res) => {\r\n\r\n    let id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(id)) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`contacts.controller.remove_contact: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        if(id === _id){\r\n            return res.status(400).send(\"You can't remove yourself as a contact\")\r\n        }\r\n\r\n        users.getOne(id, (err, user) => {\r\n            if(err){\r\n                log.warn(`contacts.controller.remove_contact: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500);\r\n            }\r\n        \r\n            if(!user){\r\n                return res.sendStatus(404);\r\n            }\r\n\r\n            contacts.remove_contact(_id, id, (err) => {\r\n\r\n                if(err) {\r\n                    log.warn(`contacts.controller.remove_contact: ${JSON.stringify(err)}`);\r\n                    return res.sendStatus(500);\r\n                }\r\n\r\n                return res.sendStatus(200);\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\nconst get_blocked = (req, res) => {\r\n    let token = req.get(config.get('authToken'));\r\n\r\n    users.getIdFromToken(token, (err, id) => {\r\n        if(err){\r\n            log.warn(`contacts.controller.get_blocked: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        contacts.get_blocked(id, (err, results) => {\r\n            if(err){\r\n                log.warn(`contacts.controller.get_blocked: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500);\r\n            }\r\n\r\n            if(!results){\r\n                return res.status(200).json([]);\r\n            }\r\n\r\n            return res.status(200).json(results);\r\n        })\r\n    });\r\n}\r\n\r\nconst block_contact = (req, res) => {\r\n\r\n    let id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(id)) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`contacts.controller.block_contact: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        if(id === _id){\r\n            return res.status(400).send(\"You can't block yourself\")\r\n        }\r\n\r\n        users.getOne(id, (err, user) => {\r\n            if(err){\r\n                log.warn(`contacts.controller.block_contact: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500);\r\n            }\r\n        \r\n            if(!user){\r\n                return res.sendStatus(404);\r\n            }\r\n\r\n            contacts.is_contact(_id, id, (err, record) =>{\r\n                if(err){\r\n                    return res.sendStatus(500);\r\n                }\r\n\r\n\r\n                if(!record){\r\n                    return res.status(400).send(\"Can't block a user who isn't in your contacts list\")\r\n                }\r\n\r\n                contacts.block_contact(_id, id, (err) => {\r\n                    if(err) {\r\n                        log.warn(`contacts.controller.block_contact: ${JSON.stringify(err)}`);\r\n                        return res.sendStatus(500);\r\n                    }\r\n    \r\n                    return res.sendStatus(200);\r\n                })\r\n            })\r\n            \r\n        })\r\n    })\r\n}\r\n\r\nconst unblock_contact = (req, res) => {\r\n\r\n    let id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(id)) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`contacts.controller.unblock_contact: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        if(id === _id){\r\n            return res.status(400).send(\"You can't block yourself\")\r\n        }\r\n\r\n        users.getOne(id, (err, user) => {\r\n            if(err){\r\n                log.warn(`contacts.controller.unblock_contact: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500);\r\n            }\r\n        \r\n            if(!user){\r\n                return res.sendStatus(404);\r\n            }\r\n\r\n            contacts.is_contact(_id, id, (err, record) =>{\r\n                if(err){\r\n                    return res.sendStatus(500);\r\n                }\r\n\r\n\r\n                if(!record){\r\n                    return res.status(400).send(\"Can't block a user who isn't in your contacts list\")\r\n                }\r\n\r\n                contacts.unblock_contact(_id, id, (err) => {\r\n                    if(err) {\r\n                        log.warn(`contacts.controller.unblock_contact: ${JSON.stringify(err)}`);\r\n                        return res.sendStatus(500);\r\n                    }\r\n    \r\n                    return res.sendStatus(200);\r\n                })\r\n            })\r\n            \r\n        })\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    get_contacts,\r\n    add_contact,\r\n    remove_contact,\r\n    get_blocked,\r\n    block_contact,\r\n    unblock_contact\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}