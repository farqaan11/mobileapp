{"ast":null,"code":"\"use strict\";\nvar ZSchema = require('z-schema'),\n  config = require(\"../config/config.js\"),\n  schema = require('../config/' + config.get('specification')),\n  options = {\n    assumeAdditional: true\n  },\n  schemaValidator = new ZSchema(options),\n  parameterValidator = require('swagger-parameters');\nvar validateId = function validateId(id) {\n  var _id = parseInt(id);\n  return Number.isInteger(_id) && _id > 0;\n};\nvar validateParameters = function validateParameters(actual, schema) {\n  return new Promise(function (resolve, reject) {\n    var parse = parameterValidator(schema);\n    parse({\n      query: actual\n    }, function (err, result) {\n      if (err) return reject(err);\n      return resolve(result.query);\n    });\n  });\n};\nvar validateSchema = function validateSchema(actual) {\n  var schemaPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'definitions';\n  return schemaValidator.validate(actual, schema, {\n    schemaPath: schemaPath\n  });\n};\nvar getLastErrors = function getLastErrors() {\n  return schemaValidator.getLastErrors();\n};\nmodule.exports = {\n  isValidSchema: validateSchema,\n  areValidParameters: validateParameters,\n  getLastErrors: getLastErrors,\n  isValidId: validateId\n};","map":{"version":3,"names":["ZSchema","require","config","schema","get","options","assumeAdditional","schemaValidator","parameterValidator","validateId","id","_id","parseInt","Number","isInteger","validateParameters","actual","Promise","resolve","reject","parse","query","err","result","validateSchema","schemaPath","arguments","length","undefined","validate","getLastErrors","module","exports","isValidSchema","areValidParameters","isValidId"],"sources":["C:/Users/bahvd/source/repos/mobileapp/app/lib/validator.js"],"sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * validation functions for checking parameters and schemas\r\n *\r\n * the heavy lifting is mostly done by ZSchema and swagger-parameters\r\n */\r\n\r\nconst\r\n    ZSchema = require('z-schema'),\r\n    config = require('../config/config.js'),\r\n    schema = require('../config/' + config.get('specification')),\r\n    options = {assumeAdditional: true}, // ban additional properties and array items from the schema (no unexpected things)\r\n    schemaValidator = new ZSchema(options),\r\n    parameterValidator = require('swagger-parameters');\r\n\r\n\r\n/**\r\n * validate :id parameters\r\n * we make no assumptions about the type of the provided :id, but check that valid == an integer > 0\r\n * could be validated against a schema of { 'type': 'integer', 'minimum': 0 }\r\n *\r\n * @param id    of any Type\r\n * @returns {boolean}\r\n */\r\nconst validateId = id => {\r\n    let _id = parseInt(id); // force to integer returns NaN if not\r\n    return Number.isInteger(_id) && (_id > 0) // big fat assumption that ids start at 1, not 0 (ok for standard mysql autoincrements)\r\n};\r\n\r\n/**\r\n * validate query parameters using swagger-parameters, and return a parsed query with types corrected to those in schema\r\n *\r\n * as we're only checking queries, and not paths or headers, instead of swagger-parameters {query:.., path:.., header:...} require just a req.query\r\n * @param actual    req.query object\r\n * @param schema    parameters schema to validate against\r\n * @param done\r\n */\r\nconst validateParameters = (actual, schema) => {\r\n    return new Promise((resolve, reject) => {\r\n            let parse = parameterValidator(schema);\r\n    parse({query: actual}, (err, result) => {\r\n        if (err) return reject(err);\r\n    return resolve(result.query);\r\n})\r\n})\r\n\r\n};\r\n\r\n/**\r\n * validate some object against the API schema\r\n *\r\n * @param actual        the object to be validated (usually a req.body)\r\n * @param schemaPath    if supplied, sub-schema to be used for validation (passed directly to ZSchema schemaPath)\r\n */\r\nconst validateSchema = (actual, schemaPath = 'definitions') => {\r\n    return schemaValidator.validate(actual, schema,  {schemaPath: schemaPath })\r\n};\r\n\r\nconst getLastErrors = () => schemaValidator.getLastErrors();\r\n\r\nmodule.exports = {\r\n    isValidSchema: validateSchema,\r\n    areValidParameters: validateParameters,\r\n    getLastErrors: getLastErrors,\r\n    isValidId: validateId\r\n};"],"mappings":"AAAA,YAAY;AAQZ,IACIA,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;EAC7BC,MAAM,GAAGD,OAAO,uBAAuB;EACvCE,MAAM,GAAGF,OAAO,CAAC,YAAY,GAAGC,MAAM,CAACE,GAAG,CAAC,eAAe,CAAC,CAAC;EAC5DC,OAAO,GAAG;IAACC,gBAAgB,EAAE;EAAI,CAAC;EAClCC,eAAe,GAAG,IAAIP,OAAO,CAACK,OAAO,CAAC;EACtCG,kBAAkB,GAAGP,OAAO,CAAC,oBAAoB,CAAC;AAWtD,IAAMQ,UAAU,GAAG,SAAbA,UAAUA,CAAGC,EAAE,EAAI;EACrB,IAAIC,GAAG,GAAGC,QAAQ,CAACF,EAAE,CAAC;EACtB,OAAOG,MAAM,CAACC,SAAS,CAACH,GAAG,CAAC,IAAKA,GAAG,GAAG,CAAE;AAC7C,CAAC;AAUD,IAAMI,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,MAAM,EAAEb,MAAM,EAAK;EAC3C,OAAO,IAAIc,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IAChC,IAAIC,KAAK,GAAGZ,kBAAkB,CAACL,MAAM,CAAC;IAC9CiB,KAAK,CAAC;MAACC,KAAK,EAAEL;IAAM,CAAC,EAAE,UAACM,GAAG,EAAEC,MAAM,EAAK;MACpC,IAAID,GAAG,EAAE,OAAOH,MAAM,CAACG,GAAG,CAAC;MAC/B,OAAOJ,OAAO,CAACK,MAAM,CAACF,KAAK,CAAC;IAChC,CAAC,CAAC;EACF,CAAC,CAAC;AAEF,CAAC;AAQD,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAIR,MAAM,EAAiC;EAAA,IAA/BS,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,aAAa;EACtD,OAAOnB,eAAe,CAACsB,QAAQ,CAACb,MAAM,EAAEb,MAAM,EAAG;IAACsB,UAAU,EAAEA;EAAW,CAAC,CAAC;AAC/E,CAAC;AAED,IAAMK,aAAa,GAAG,SAAhBA,aAAaA,CAAA;EAAA,OAASvB,eAAe,CAACuB,aAAa,EAAE;AAAA;AAE3DC,MAAM,CAACC,OAAO,GAAG;EACbC,aAAa,EAAET,cAAc;EAC7BU,kBAAkB,EAAEnB,kBAAkB;EACtCe,aAAa,EAAEA,aAAa;EAC5BK,SAAS,EAAE1B;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}