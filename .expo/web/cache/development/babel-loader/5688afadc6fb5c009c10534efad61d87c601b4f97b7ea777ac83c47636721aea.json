{"ast":null,"code":"var config = require(\"./config.js\");\nvar version = config.get('version');\nvar specification = config.get('specification');\nvar swaggerUi = require(\"swagger-ui-express\");\nvar swaggerDocument = require(specification);\nvar routes = require(\"../routes\");\nvar express = require('express'),\n  bodyParser = require('body-parser'),\n  morgan = require('morgan'),\n  rawBodyParser = require(\"../lib/rawbodyparser\"),\n  multer = require('multer'),\n  cors = require('cors');\nvar jsonParser = bodyParser.json();\nvar rawParser = rawBodyParser.rawParser;\nvar upload = multer({\n  limits: {\n    fileSize: '50Mb'\n  }\n});\nvar dynamicBodyParser = function dynamicBodyParser(req, res, next) {\n  var contentType = req.header('Content-Type') || '';\n  if (contentType === 'image/jpeg' || contentType === 'image/png') {\n    rawParser(req, res, next);\n  } else {\n    jsonParser(req, res, next);\n  }\n};\nmodule.exports = function () {\n  var app = express();\n  app.use('/api/' + version + '/documentation', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n  app.use(dynamicBodyParser);\n  app.use(cors());\n  app.use(function (req, res, next) {\n    console.log(\"##### \" + req.method + \" \" + req.path + \" #####\");\n    next();\n  });\n  app.use(morgan('tiny'));\n  app.get('/api/' + version, function (req, res) {\n    res.status(200).json({\n      \"msg\": \"Server up\"\n    });\n  });\n  app.use(\"/api/\" + version, routes);\n  return app;\n};","map":{"version":3,"names":["config","require","version","get","specification","swaggerUi","swaggerDocument","routes","express","bodyParser","morgan","rawBodyParser","multer","cors","jsonParser","json","rawParser","upload","limits","fileSize","dynamicBodyParser","req","res","next","contentType","header","module","exports","app","use","serve","setup","console","log","method","path","status"],"sources":["C:/Users/bahvd/source/repos/mobileapp/app/config/express.js"],"sourcesContent":["const config = require('./config.js');\r\nconst version = config.get('version');\r\n\r\nconst specification = config.get('specification');\r\nconst swaggerUi = require(\"swagger-ui-express\");\r\nconst swaggerDocument = require(specification);\r\n\r\nconst routes = require('../routes');\r\n\r\n\r\nconst\r\n    express = require('express'),\r\n    bodyParser = require('body-parser'),\r\n    morgan = require('morgan'),\r\n    rawBodyParser = require('../lib/rawbodyparser'),\r\n    multer = require('multer'),\r\n    cors = require('cors');\r\n\r\n// const allowCrossOriginRequests = (req, res, next) => {\r\n//     res.header('Access-Control-Allow-Origin', '*');\r\n//     res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, X-Authorization');\r\n//     res.header('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE');\r\n//     next();\r\n// };\r\n\r\n// Determine correct body parser to use\r\nconst jsonParser = bodyParser.json();\r\nconst rawParser = rawBodyParser.rawParser;\r\nconst upload = multer({ limits: { fileSize: '50Mb' } });\r\n\r\n\r\n\r\n\r\nconst dynamicBodyParser = (req, res, next) => {\r\n  const contentType = req.header('Content-Type') || '';\r\n  if (contentType === 'image/jpeg' || contentType === 'image/png') {\r\n      rawParser(req, res, next);\r\n  } else {\r\n      jsonParser(req, res, next);\r\n  }\r\n}\r\n\r\nmodule.exports = function(){\r\n    const app = express();\r\n\r\n    app.use(\r\n        '/api/' + version + '/documentation',\r\n        swaggerUi.serve, \r\n        swaggerUi.setup(swaggerDocument)\r\n    );\r\n\r\n    app.use(dynamicBodyParser);\r\n\r\n    app.use(cors())\r\n    // app.use(allowCrossOriginRequests);\r\n\r\n    app.use((req, res, next) => {\r\n        console.log(`##### ${req.method} ${req.path} #####`);\r\n        next();\r\n    });\r\n\r\n    app.use(morgan('tiny'));\r\n\r\n    app.get('/api/' + version, function(req, res){\r\n        res.status(200).json({\"msg\": \"Server up\"});\r\n    });\r\n\r\n    app.use(\"/api/\" + version, routes)\r\n\r\n\r\n    return app;\r\n};"],"mappings":"AAAA,IAAMA,MAAM,GAAGC,OAAO,eAAe;AACrC,IAAMC,OAAO,GAAGF,MAAM,CAACG,GAAG,CAAC,SAAS,CAAC;AAErC,IAAMC,aAAa,GAAGJ,MAAM,CAACG,GAAG,CAAC,eAAe,CAAC;AACjD,IAAME,SAAS,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;AAC/C,IAAMK,eAAe,GAAGL,OAAO,CAACG,aAAa,CAAC;AAE9C,IAAMG,MAAM,GAAGN,OAAO,aAAa;AAGnC,IACIO,OAAO,GAAGP,OAAO,CAAC,SAAS,CAAC;EAC5BQ,UAAU,GAAGR,OAAO,CAAC,aAAa,CAAC;EACnCS,MAAM,GAAGT,OAAO,CAAC,QAAQ,CAAC;EAC1BU,aAAa,GAAGV,OAAO,wBAAwB;EAC/CW,MAAM,GAAGX,OAAO,CAAC,QAAQ,CAAC;EAC1BY,IAAI,GAAGZ,OAAO,CAAC,MAAM,CAAC;AAU1B,IAAMa,UAAU,GAAGL,UAAU,CAACM,IAAI,EAAE;AACpC,IAAMC,SAAS,GAAGL,aAAa,CAACK,SAAS;AACzC,IAAMC,MAAM,GAAGL,MAAM,CAAC;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAO;AAAE,CAAC,CAAC;AAKvD,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAK;EAC5C,IAAMC,WAAW,GAAGH,GAAG,CAACI,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE;EACpD,IAAID,WAAW,KAAK,YAAY,IAAIA,WAAW,KAAK,WAAW,EAAE;IAC7DR,SAAS,CAACK,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;EAC7B,CAAC,MAAM;IACHT,UAAU,CAACO,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;EAC9B;AACF,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAG,YAAU;EACvB,IAAMC,GAAG,GAAGpB,OAAO,EAAE;EAErBoB,GAAG,CAACC,GAAG,CACH,OAAO,GAAG3B,OAAO,GAAG,gBAAgB,EACpCG,SAAS,CAACyB,KAAK,EACfzB,SAAS,CAAC0B,KAAK,CAACzB,eAAe,CAAC,CACnC;EAEDsB,GAAG,CAACC,GAAG,CAACT,iBAAiB,CAAC;EAE1BQ,GAAG,CAACC,GAAG,CAAChB,IAAI,EAAE,CAAC;EAGfe,GAAG,CAACC,GAAG,CAAC,UAACR,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAK;IACxBS,OAAO,CAACC,GAAG,YAAUZ,GAAG,CAACa,MAAM,SAAIb,GAAG,CAACc,IAAI,YAAS;IACpDZ,IAAI,EAAE;EACV,CAAC,CAAC;EAEFK,GAAG,CAACC,GAAG,CAACnB,MAAM,CAAC,MAAM,CAAC,CAAC;EAEvBkB,GAAG,CAACzB,GAAG,CAAC,OAAO,GAAGD,OAAO,EAAE,UAASmB,GAAG,EAAEC,GAAG,EAAC;IACzCA,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACrB,IAAI,CAAC;MAAC,KAAK,EAAE;IAAW,CAAC,CAAC;EAC9C,CAAC,CAAC;EAEFa,GAAG,CAACC,GAAG,CAAC,OAAO,GAAG3B,OAAO,EAAEK,MAAM,CAAC;EAGlC,OAAOqB,GAAG;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}