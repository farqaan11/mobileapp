{"ast":null,"code":"var chats = require(\"../models/chat.server.models\"),\n  users = require(\"../models/user.server.models\"),\n  contacts = require(\"../models/contact.server.models\"),\n  log = require(\"../lib/logger\")(),\n  validator = require(\"../lib/validator\"),\n  config = require(\"../config/config.js\"),\n  schema = require('../config/' + config.get('specification'));\nvar get_chats = function get_chats(req, res) {\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.get_chats: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    chats.get_all_chats(_id, function (err, results) {\n      if (err) {\n        log.warn(\"chat.controller.get_chats: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      return res.status(200).send(results);\n    });\n  });\n};\nvar create_chat = function create_chat(req, res) {\n  if (!validator.isValidSchema(req.body, 'components.schemas.CreateChat')) {\n    log.warn(\"chat.controller.create_chat: bad data \" + JSON.stringify(req.body));\n    log.warn(validator.getLastErrors());\n    return res.sendStatus(400);\n  }\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.create_chat: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    var chat = Object.assign({}, req.body);\n    chats.insert(chat, _id, function (err, id) {\n      if (err) {\n        log.warn(\"chat.controller.create_chat: couldn't create \" + JSON.stringify(chat) + \": \" + err);\n        return res.sendStatus(500);\n      }\n      return res.status(201).send({\n        \"chat_id\": id\n      });\n    });\n  });\n};\nvar get_single_chat = function get_single_chat(req, res) {\n  var chat_id = parseInt(req.params.chat_id);\n  if (!validator.isValidId(chat_id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.get_single_chat: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    chats.get_single_chat(chat_id, function (err, chat_details) {\n      if (err) {\n        if (err === 404) {\n          log.warn(\"chat.controller.get_single_chat: no chat found\");\n          return res.sendStatus(404);\n        }\n        log.warn(\"chat.controller.get_single_chat: \" + JSON.stringify(err));\n        console.log(\"HERE\");\n        return res.sendStatus(500);\n      }\n      var logged_in_is_member = chat_details.members.find(function (user) {\n        return user.user_id === _id;\n      });\n      if (!logged_in_is_member) {\n        log.warn(\"chat.controller.get_single_chat: logged in user isn't a member of the chat\");\n        return res.sendStatus(403);\n      }\n      return res.status(200).send(chat_details);\n    });\n  });\n};\nvar update_chat = function update_chat(req, res) {\n  var chat_id = parseInt(req.params.chat_id);\n  if (!validator.isValidId(chat_id)) return res.sendStatus(404);\n  if (!validator.isValidSchema(req.body, 'components.schemas.UpdateChat')) {\n    log.warn(\"chat.controller.update_chat: bad data \" + JSON.stringify(req.body));\n    log.warn(validator.getLastErrors());\n    return res.sendStatus(400);\n  }\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.update_chat: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    chats.get_single_chat(chat_id, function (err, chat_details) {\n      if (err) {\n        log.warn(\"chat.controller.update_chat: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!chat_details) {\n        log.warn(\"chat.controller.update_chat: chat doesn't exist with ID: \" + chat_id);\n        return res.sendStatus(404);\n      }\n      var logged_in_is_member = chat_details.members.find(function (user) {\n        return user.user_id === _id;\n      });\n      if (!logged_in_is_member) {\n        log.warn(\"chat.controller.update_chat: logged in user isn't a member of the chat with ID: \" + chat_id);\n        return res.sendStatus(403);\n      }\n      var chat = Object.assign({}, req.body);\n      chats.update_chat(chat_id, chat, function (err) {\n        if (err) {\n          log.warn(\"chat.controller.update_chat: \" + JSON.stringify(err));\n          return res.sendStatus(500);\n        }\n        return res.sendStatus(200);\n      });\n    });\n  });\n};\nvar add_user_to_chat = function add_user_to_chat(req, res) {\n  var chat_id = parseInt(req.params.chat_id);\n  var user_id = parseInt(req.params.user_id);\n  if (!validator.isValidId(chat_id) || !validator.isValidId(user_id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.add_user_to_chat: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    chats.get_single_chat(chat_id, function (err, chat_details) {\n      if (err) {\n        log.warn(\"chat.controller.add_user_to_chat: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!chat_details) {\n        log.warn(\"chat.controller.add_user_to_chat: chat doesn't exist with ID: \" + chat_id);\n        return res.sendStatus(404);\n      }\n      var logged_in_is_member = chat_details.members.find(function (user) {\n        return user.user_id === _id;\n      });\n      if (!logged_in_is_member) {\n        log.warn(\"chat.controller.add_user_to_chat: logged in user isn't a member of the chat with ID: \" + chat_id);\n        return res.sendStatus(403);\n      }\n      var user_is_member = chat_details.members.find(function (user) {\n        return user.user_id === user_id;\n      });\n      if (user_is_member) {\n        log.warn(\"chat.controller.add_user_to_chat: adding a user who is already in the chat\");\n        return res.status(400).send(\"User already in the chat\");\n      }\n      users.getOne(user_id, function (err, results) {\n        if (err) {\n          log.warn(\"chat.controller.add_user_to_chat: \" + JSON.stringify(err));\n          return res.sendStatus(500);\n        }\n        if (!results) {\n          log.warn(\"chat.controller.add_user_to_chat: no user found\");\n          return res.sendStatus(404);\n        }\n        contacts.is_contact(_id, user_id, function (err, contact) {\n          if (err) {\n            log.warn(\"chat.controller.add_user_to_chat: \" + JSON.stringify(err));\n            return res.sendStatus(500);\n          }\n          if (!contact) {\n            log.warn(\"chat.controller.add_user_to_chat: adding a user who isn't a contact\");\n            return res.status(400).send(\"Add the user as a contact first\");\n          }\n          chats.add_user_to_chat(chat_id, user_id, function (err) {\n            if (err) {\n              log.warn(\"chat.controller.add_user_to_chat: \" + JSON.stringify(err));\n              return res.sendStatus(500);\n            }\n            return res.sendStatus(200);\n          });\n        });\n      });\n    });\n  });\n};\nvar remove_user_from_chat = function remove_user_from_chat(req, res) {\n  var chat_id = parseInt(req.params.chat_id);\n  var user_id = parseInt(req.params.user_id);\n  if (!validator.isValidId(chat_id) || !validator.isValidId(user_id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.remove_user_from_chat: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    chats.get_single_chat(chat_id, function (err, chat_details) {\n      if (err) {\n        log.warn(\"chat.controller.remove_user_from_chat: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!chat_details) {\n        log.warn(\"chat.controller.remove_user_from_chat: chat doesn't exist with ID: \" + chat_id);\n        return res.sendStatus(404);\n      }\n      var logged_in_is_member = chat_details.members.find(function (user) {\n        return user.user_id === _id;\n      });\n      if (!logged_in_is_member) {\n        log.warn(\"chat.controller.remove_user_from_chat: logged in user isn't a member of the chat with ID: \" + chat_id);\n        return res.sendStatus(403);\n      }\n      var user_is_member = chat_details.members.find(function (user) {\n        return user.user_id === user_id;\n      });\n      if (!user_is_member) {\n        log.warn(\"chat.controller.remove_user_from_chat: removing a user who is not in the chat\");\n        return res.status(400).send(\"User not in the chat\");\n      }\n      users.getOne(user_id, function (err, results) {\n        if (err) {\n          log.warn(\"chat.controller.remove_user_from_chat: \" + JSON.stringify(err));\n          return res.sendStatus(500);\n        }\n        if (!results) {\n          log.warn(\"chat.controller.remove_user_from_chat: no user found\");\n          return res.sendStatus(404);\n        }\n        chats.remove_user_from_chat(chat_id, user_id, function (err) {\n          if (err) {\n            log.warn(\"chat.controller.remove_user_from_chat: \" + JSON.stringify(err));\n            return res.sendStatus(500);\n          }\n          return res.sendStatus(200);\n        });\n      });\n    });\n  });\n};\nvar send_message = function send_message(req, res) {\n  var chat_id = parseInt(req.params.chat_id);\n  if (!validator.isValidId(chat_id)) return res.sendStatus(404);\n  if (!validator.isValidSchema(req.body, 'components.schemas.SendMessage')) {\n    log.warn(\"chat.controller.send_message: bad data \" + JSON.stringify(req.body));\n    log.warn(validator.getLastErrors());\n    return res.sendStatus(400);\n  }\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.send_message: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    chats.get_single_chat(chat_id, function (err, chat_details) {\n      if (err) {\n        log.warn(\"chat.controller.send_message: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!chat_details) {\n        log.warn(\"chat.controller.send_message: chat doesn't exist with ID: \" + chat_id);\n        return res.sendStatus(404);\n      }\n      var logged_in_is_member = chat_details.members.find(function (user) {\n        return user.user_id === _id;\n      });\n      if (!logged_in_is_member) {\n        log.warn(\"chat.controller.send_message: logged in user isn't a member of the chat with ID: \" + chat_id);\n        return res.sendStatus(403);\n      }\n      var message = Object.assign({}, req.body);\n      chats.send_message(chat_id, message, _id, function (err) {\n        if (err) {\n          log.warn(\"chat.controller.send_message: \" + JSON.stringify(err));\n          return res.sendStatus(500);\n        }\n        return res.sendStatus(200);\n      });\n    });\n  });\n};\nvar update_message = function update_message(req, res) {\n  var chat_id = parseInt(req.params.chat_id);\n  var message_id = parseInt(req.params.message_id);\n  if (!validator.isValidId(chat_id) || !validator.isValidId(message_id)) return res.sendStatus(404);\n  if (!validator.isValidSchema(req.body, 'components.schemas.UpdateMessage')) {\n    log.warn(\"chat.controller.update_message: bad data \" + JSON.stringify(req.body));\n    log.warn(validator.getLastErrors());\n    return res.sendStatus(400);\n  }\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.update_message: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    chats.get_single_chat(chat_id, function (err, chat_details) {\n      if (err) {\n        log.warn(\"chat.controller.update_message: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!chat_details) {\n        log.warn(\"chat.controller.update_message: chat doesn't exist with ID: \" + chat_id);\n        return res.sendStatus(404);\n      }\n      var message = Object.assign({}, req.body);\n      chats.update_message(chat_id, message_id, message, _id, function (err) {\n        if (err) {\n          if (err === 403) {\n            log.warn(\"chat.controller.update_message: \" + JSON.stringify(err));\n            return res.status(403).send(\"Can't edit messages written by others\");\n          }\n          if (err === 404) {\n            log.warn(\"chat.controller.update_message: \" + JSON.stringify(err));\n            return res.status(404).send(\"Can't find message with that ID\");\n          }\n          log.warn(\"chat.controller.update_message: \" + JSON.stringify(err));\n          return res.sendStatus(500);\n        }\n        return res.sendStatus(200);\n      });\n    });\n  });\n};\nvar delete_message = function delete_message(req, res) {\n  var chat_id = parseInt(req.params.chat_id);\n  var message_id = parseInt(req.params.message_id);\n  if (!validator.isValidId(chat_id) || !validator.isValidId(message_id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"chat.controller.delete_message: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    chats.get_single_chat(chat_id, function (err, chat_details) {\n      if (err) {\n        log.warn(\"chat.controller.delete_message: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      if (!chat_details) {\n        log.warn(\"chat.controller.delete_message: chat doesn't exist with ID: \" + chat_id);\n        return res.sendStatus(404);\n      }\n      chats.delete_message(chat_id, message_id, _id, function (err) {\n        if (err) {\n          if (err === 403) {\n            log.warn(\"chat.controller.delete_message: \" + JSON.stringify(err));\n            return res.status(403).send(\"Can't delete messages written by others\");\n          }\n          if (err === 404) {\n            log.warn(\"chat.controller.delete_message: \" + JSON.stringify(err));\n            return res.status(404).send(\"Can't find message with that ID\");\n          }\n          log.warn(\"chat.controller.delete_message: \" + JSON.stringify(err));\n          return res.sendStatus(500);\n        }\n        return res.sendStatus(200);\n      });\n    });\n  });\n};\nmodule.exports = {\n  get_chats: get_chats,\n  create_chat: create_chat,\n  get_single_chat: get_single_chat,\n  update_chat: update_chat,\n  add_user_to_chat: add_user_to_chat,\n  remove_user_from_chat: remove_user_from_chat,\n  send_message: send_message,\n  update_message: update_message,\n  delete_message: delete_message\n};","map":{"version":3,"names":["chats","require","users","contacts","log","validator","config","schema","get","get_chats","req","res","token","getIdFromToken","err","_id","warn","JSON","stringify","sendStatus","get_all_chats","results","status","send","create_chat","isValidSchema","body","getLastErrors","chat","Object","assign","insert","id","get_single_chat","chat_id","parseInt","params","isValidId","chat_details","console","logged_in_is_member","members","find","user","user_id","update_chat","add_user_to_chat","user_is_member","getOne","is_contact","contact","remove_user_from_chat","send_message","message","update_message","message_id","delete_message","module","exports"],"sources":["C:/Users/bahvd/source/repos/mobileapp/app/controllers/chat.server.controllers.js"],"sourcesContent":["const\r\n  chats = require('../models/chat.server.models'),\r\n  users = require('../models/user.server.models'),\r\n  contacts = require('../models/contact.server.models'),\r\n  log = require('../lib/logger')(),\r\n  validator = require('../lib/validator'),\r\n  config = require('../config/config.js'),\r\n  schema = require('../config/' + config.get('specification'));\r\n\r\n\r\nconst get_chats = (req, res) => {\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.get_chats: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        chats.get_all_chats(_id, (err, results) => {\r\n            if(err){\r\n                log.warn(`chat.controller.get_chats: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            return res.status(200).send(results);\r\n        }) \r\n    })\r\n}\r\n\r\nconst create_chat = (req, res) => {\r\n    if (!validator.isValidSchema(req.body, 'components.schemas.CreateChat')) {\r\n        log.warn(`chat.controller.create_chat: bad data ${JSON.stringify(req.body)}`);\r\n        log.warn(validator.getLastErrors());\r\n        return res.sendStatus(400);\r\n    }\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.create_chat: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        let chat = Object.assign({}, req.body);\r\n\r\n        chats.insert(chat, _id, function(err, id){\r\n            if(err) {\r\n                log.warn(`chat.controller.create_chat: couldn't create ${JSON.stringify(chat)}: ${err}`);\r\n                return res.sendStatus(500);\r\n            }\r\n\r\n            return res.status(201).send({\"chat_id\": id});  \r\n        });\r\n\r\n    })\r\n}\r\n\r\nconst get_single_chat = (req, res) => {\r\n    let chat_id = parseInt(req.params.chat_id);\r\n    if (!validator.isValidId(chat_id)) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.get_single_chat: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        chats.get_single_chat(chat_id, (err, chat_details) => {\r\n            if(err){\r\n                if(err === 404){\r\n                    log.warn(`chat.controller.get_single_chat: no chat found`);\r\n                    return res.sendStatus(404); \r\n                }\r\n\r\n                log.warn(`chat.controller.get_single_chat: ${JSON.stringify(err)}`);\r\n                console.log(\"HERE\")\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            //logged in user not a chat member?\r\n            let logged_in_is_member = chat_details.members.find(user => user.user_id === _id);\r\n\r\n            if(!logged_in_is_member){\r\n                log.warn(`chat.controller.get_single_chat: logged in user isn't a member of the chat`);\r\n                return res.sendStatus(403);\r\n            }\r\n\r\n            return res.status(200).send(chat_details);\r\n        }) \r\n    })\r\n}\r\n\r\nconst update_chat = (req, res) => {\r\n    let chat_id = parseInt(req.params.chat_id);\r\n    if (!validator.isValidId(chat_id)) return res.sendStatus(404);\r\n\r\n    if (!validator.isValidSchema(req.body, 'components.schemas.UpdateChat')) {\r\n        log.warn(`chat.controller.update_chat: bad data ${JSON.stringify(req.body)}`);\r\n        log.warn(validator.getLastErrors());\r\n        return res.sendStatus(400);\r\n    }\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.update_chat: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n    \r\n        //chat exists?\r\n        chats.get_single_chat(chat_id, (err, chat_details) => {\r\n            if(err){\r\n                log.warn(`chat.controller.update_chat: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            if(!chat_details){\r\n                log.warn(`chat.controller.update_chat: chat doesn't exist with ID: ${chat_id}`);\r\n                return res.sendStatus(404); \r\n            }\r\n\r\n            //logged in user is member of the chat\r\n            let logged_in_is_member = chat_details.members.find(user => user.user_id === _id);\r\n\r\n            if(!logged_in_is_member){\r\n                log.warn(`chat.controller.update_chat: logged in user isn't a member of the chat with ID: ${chat_id}`);\r\n                return res.sendStatus(403); \r\n            }\r\n\r\n            let chat = Object.assign({}, req.body);\r\n\r\n            chats.update_chat(chat_id, chat, (err) => {\r\n                if(err){\r\n                    log.warn(`chat.controller.update_chat: ${JSON.stringify(err)}`);\r\n                    return res.sendStatus(500);\r\n                }\r\n\r\n                return res.sendStatus(200);\r\n            })\r\n        });\r\n    })\r\n}\r\n\r\nconst add_user_to_chat = (req, res) => {\r\n    let chat_id = parseInt(req.params.chat_id);\r\n    let user_id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(chat_id) || !validator.isValidId(user_id) ) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.add_user_to_chat: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n    \r\n        //chat exists?\r\n        chats.get_single_chat(chat_id, (err, chat_details) => {\r\n            if(err){\r\n                log.warn(`chat.controller.add_user_to_chat: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            if(!chat_details){\r\n                log.warn(`chat.controller.add_user_to_chat: chat doesn't exist with ID: ${chat_id}`);\r\n                return res.sendStatus(404); \r\n            }\r\n\r\n            //logged in user is member of the chat\r\n            let logged_in_is_member = chat_details.members.find(user => user.user_id === _id);\r\n\r\n            if(!logged_in_is_member){\r\n                log.warn(`chat.controller.add_user_to_chat: logged in user isn't a member of the chat with ID: ${chat_id}`);\r\n                return res.sendStatus(403); \r\n            }\r\n\r\n             //user is not already in the chat\r\n             let user_is_member = chat_details.members.find(user => user.user_id === user_id);\r\n\r\n             //user is not already in the chat\r\n            if(user_is_member){\r\n                log.warn(`chat.controller.add_user_to_chat: adding a user who is already in the chat`);\r\n                return res.status(400).send(\"User already in the chat\");\r\n            }\r\n\r\n            //user exists?\r\n            users.getOne(user_id, (err, results) => {\r\n                if (err) {\r\n                    log.warn(`chat.controller.add_user_to_chat: ${JSON.stringify(err)}`);\r\n                    return res.sendStatus(500);\r\n                }\r\n                \r\n                if (!results) {  // no user found\r\n                    log.warn(`chat.controller.add_user_to_chat: no user found`);\r\n                    return res.sendStatus(404);\r\n                }\r\n\r\n                //user is in the contacts of the logged in user?\r\n                contacts.is_contact(_id, user_id, (err, contact) => {\r\n                    if (err) {\r\n                        log.warn(`chat.controller.add_user_to_chat: ${JSON.stringify(err)}`);\r\n                        return res.sendStatus(500);\r\n                    }\r\n\r\n                    if(!contact){\r\n                        log.warn(`chat.controller.add_user_to_chat: adding a user who isn't a contact`);\r\n                        return res.status(400).send(\"Add the user as a contact first\");\r\n                    }\r\n\r\n                   \r\n\r\n                    chats.add_user_to_chat(chat_id, user_id, (err) => {\r\n                        if(err){\r\n                            log.warn(`chat.controller.add_user_to_chat: ${JSON.stringify(err)}`);\r\n                            return res.sendStatus(500);\r\n                        }\r\n\r\n                        return res.sendStatus(200);\r\n                    })\r\n                })\r\n            })\r\n        });\r\n    })\r\n}\r\n\r\nconst remove_user_from_chat = (req, res) => {\r\n    let chat_id = parseInt(req.params.chat_id);\r\n    let user_id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(chat_id) || !validator.isValidId(user_id) ) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.remove_user_from_chat: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n    \r\n        //chat exists?\r\n        chats.get_single_chat(chat_id, (err, chat_details) => {\r\n            if(err){\r\n                log.warn(`chat.controller.remove_user_from_chat: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            if(!chat_details){\r\n                log.warn(`chat.controller.remove_user_from_chat: chat doesn't exist with ID: ${chat_id}`);\r\n                return res.sendStatus(404); \r\n            }\r\n\r\n            //logged in user is member of the chat\r\n            let logged_in_is_member = chat_details.members.find(user => user.user_id === _id);\r\n\r\n            if(!logged_in_is_member){\r\n                log.warn(`chat.controller.remove_user_from_chat: logged in user isn't a member of the chat with ID: ${chat_id}`);\r\n                return res.sendStatus(403); \r\n            }\r\n\r\n             //user is already in the chat\r\n             let user_is_member = chat_details.members.find(user => user.user_id === user_id);\r\n\r\n             //user is not already in the chat\r\n            if(!user_is_member){\r\n                log.warn(`chat.controller.remove_user_from_chat: removing a user who is not in the chat`);\r\n                return res.status(400).send(\"User not in the chat\");\r\n            }\r\n\r\n            //user exists?\r\n            users.getOne(user_id, (err, results) => {\r\n                if (err) {\r\n                    log.warn(`chat.controller.remove_user_from_chat: ${JSON.stringify(err)}`);\r\n                    return res.sendStatus(500);\r\n                }\r\n                \r\n                if (!results) {  // no user found\r\n                    log.warn(`chat.controller.remove_user_from_chat: no user found`);\r\n                    return res.sendStatus(404);\r\n                }\r\n\r\n                chats.remove_user_from_chat(chat_id, user_id, (err) => {\r\n                    if(err){\r\n                        log.warn(`chat.controller.remove_user_from_chat: ${JSON.stringify(err)}`);\r\n                        return res.sendStatus(500);\r\n                    }\r\n\r\n                    return res.sendStatus(200);\r\n                })\r\n            })\r\n        });\r\n    })\r\n}\r\n\r\nconst send_message = (req, res) => {\r\n    let chat_id = parseInt(req.params.chat_id);\r\n    if (!validator.isValidId(chat_id)) return res.sendStatus(404);\r\n\r\n    if (!validator.isValidSchema(req.body, 'components.schemas.SendMessage')) {\r\n        log.warn(`chat.controller.send_message: bad data ${JSON.stringify(req.body)}`);\r\n        log.warn(validator.getLastErrors());\r\n        return res.sendStatus(400);\r\n    }\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.send_message: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n    \r\n        //chat exists?\r\n        chats.get_single_chat(chat_id, (err, chat_details) => {\r\n            if(err){\r\n                log.warn(`chat.controller.send_message: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            if(!chat_details){\r\n                log.warn(`chat.controller.send_message: chat doesn't exist with ID: ${chat_id}`);\r\n                return res.sendStatus(404); \r\n            }\r\n\r\n            //logged in user is member of the chat\r\n            let logged_in_is_member = chat_details.members.find(user => user.user_id === _id);\r\n\r\n            if(!logged_in_is_member){\r\n                log.warn(`chat.controller.send_message: logged in user isn't a member of the chat with ID: ${chat_id}`);\r\n                return res.sendStatus(403); \r\n            }\r\n\r\n            let message = Object.assign({}, req.body);\r\n\r\n            chats.send_message(chat_id, message, _id, (err) => {\r\n                if(err){\r\n                    log.warn(`chat.controller.send_message: ${JSON.stringify(err)}`);\r\n                    return res.sendStatus(500);\r\n                }\r\n\r\n                return res.sendStatus(200);\r\n            })\r\n        });\r\n    })\r\n}\r\n\r\nconst update_message = (req, res) => {\r\n    let chat_id = parseInt(req.params.chat_id);\r\n    let message_id = parseInt(req.params.message_id);\r\n    if (!validator.isValidId(chat_id) || !validator.isValidId(message_id)) return res.sendStatus(404);\r\n\r\n    if (!validator.isValidSchema(req.body, 'components.schemas.UpdateMessage')) {\r\n        log.warn(`chat.controller.update_message: bad data ${JSON.stringify(req.body)}`);\r\n        log.warn(validator.getLastErrors());\r\n        return res.sendStatus(400);\r\n    }\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.update_message: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n    \r\n        //chat exists?\r\n        chats.get_single_chat(chat_id, (err, chat_details) => {\r\n            if(err){\r\n                log.warn(`chat.controller.update_message: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            if(!chat_details){\r\n                log.warn(`chat.controller.update_message: chat doesn't exist with ID: ${chat_id}`);\r\n                return res.sendStatus(404); \r\n            }\r\n\r\n            let message = Object.assign({}, req.body);\r\n\r\n            chats.update_message(chat_id, message_id, message, _id, (err) => {\r\n                if(err){\r\n\r\n                    if(err === 403){\r\n                        log.warn(`chat.controller.update_message: ${JSON.stringify(err)}`);\r\n                        return res.status(403).send(\"Can't edit messages written by others\");\r\n                    }\r\n\r\n                    if(err === 404){\r\n                        log.warn(`chat.controller.update_message: ${JSON.stringify(err)}`);\r\n                        return res.status(404).send(\"Can't find message with that ID\");\r\n                    }\r\n\r\n                    log.warn(`chat.controller.update_message: ${JSON.stringify(err)}`);\r\n                    return res.sendStatus(500);\r\n                }\r\n\r\n                return res.sendStatus(200);\r\n            })\r\n        });\r\n    })\r\n}\r\n\r\nconst delete_message = (req, res) => {\r\n    let chat_id = parseInt(req.params.chat_id);\r\n    let message_id = parseInt(req.params.message_id);\r\n    if (!validator.isValidId(chat_id) || !validator.isValidId(message_id)) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n        if(err){\r\n            log.warn(`chat.controller.delete_message: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n    \r\n        //chat exists?\r\n        chats.get_single_chat(chat_id, (err, chat_details) => {\r\n            if(err){\r\n                log.warn(`chat.controller.delete_message: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            if(!chat_details){\r\n                log.warn(`chat.controller.delete_message: chat doesn't exist with ID: ${chat_id}`);\r\n                return res.sendStatus(404); \r\n            }\r\n\r\n            chats.delete_message(chat_id, message_id, _id, (err) => {\r\n                if(err){\r\n\r\n                    if(err === 403){\r\n                        log.warn(`chat.controller.delete_message: ${JSON.stringify(err)}`);\r\n                        return res.status(403).send(\"Can't delete messages written by others\");\r\n                    }\r\n\r\n                    if(err === 404){\r\n                        log.warn(`chat.controller.delete_message: ${JSON.stringify(err)}`);\r\n                        return res.status(404).send(\"Can't find message with that ID\");\r\n                    }\r\n\r\n                    log.warn(`chat.controller.delete_message: ${JSON.stringify(err)}`);\r\n                    return res.sendStatus(500);\r\n                }\r\n\r\n                return res.sendStatus(200);\r\n            })\r\n        });\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    get_chats,\r\n    create_chat,\r\n    get_single_chat,\r\n    update_chat,\r\n    add_user_to_chat,\r\n    remove_user_from_chat,\r\n    send_message,\r\n    update_message,\r\n    delete_message\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}