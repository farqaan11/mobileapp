{"ast":null,"code":"var sqlite3 = require('sqlite3').verbose();\nvar DBSOURCE = \"db.sqlite\";\nvar db = new sqlite3.Database(DBSOURCE, function (err) {\n  if (err) {\n    console.error(err.message);\n    throw err;\n  } else {\n    console.log('Connected to the SQLite database.');\n    db.run(\"CREATE TABLE whatsthat_users (\\n            user_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n            given_name text NOT NULL,\\n            family_name text NOT NULL,\\n            email text NOT NULL UNIQUE,\\n            password text NOT NULL,\\n            salt text NOT NULL,\\n            token text DEFAULT NULL UNIQUE,\\n            CONSTRAINT email_unique UNIQUE (email),\\n            CONSTRAINT token_unique UNIQUE (token)\\n        )\", function (err) {\n      if (err) {\n        console.log(\"whatsthat_users table already created\");\n      } else {\n        console.log(\"whatsthat_users table created\");\n      }\n      db.run(\"CREATE TABLE whatsthat_user_contacts (\\n                user_id INTEGER,\\n                contact_id INTEGER,\\n                blocked INTEGER NOT NULL DEFAULT 0,\\n                PRIMARY KEY(user_id, contact_id),\\n                FOREIGN KEY(user_id) REFERENCES whatsthat_users(user_id)\\n                FOREIGN KEY(contact_id) REFERENCES whatsthat_users(user_id)\\n            )\", function (err) {\n        if (err) {\n          console.log(\"whatsthat_user_contacts table already created\");\n        } else {\n          console.log(\"whatsthat_user_contacts table created\");\n        }\n        db.run(\"CREATE TABLE whatsthat_chats (\\n                    chat_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                    name TEXT NOT NULL,\\n                    creator INTEGER NOT NULL,\\n                    FOREIGN KEY(creator) REFERENCES whatsthat_users(user_id)                   \\n                )\", function (err) {\n          if (err) {\n            console.log(\"whatsthat_chats table already created\");\n          } else {\n            console.log(\"whatsthat_chats table created\");\n          }\n          db.run(\"CREATE TABLE whatsthat_chat_users (\\n                        chat_id INTEGER,\\n                        user_id INTEGER,\\n                        PRIMARY KEY(chat_id, user_id),\\n                        FOREIGN KEY(chat_id) REFERENCES whatsthat_chats(chat_id),\\n                        FOREIGN KEY(user_id) REFERENCES whatsthat_users(user_id) \\n                    )\", function (err) {\n            if (err) {\n              console.log(\"whatsthat_chat_users table already created\");\n            } else {\n              console.log(\"whatsthat_chat_users table created\");\n            }\n            db.run(\"CREATE TABLE whatsthat_messages (\\n                            message_id INTEGER PRIMARY KEY AUTOINCREMENT,\\n                            chat_id INTEGER NOT NULL,\\n                            message TEXT NOT NULL,\\n                            timestamp INTEGER NOT NULL DEFAULT -1,\\n                            author INTEGER NOT NULL,\\n                            FOREIGN KEY(chat_id) REFERENCES whatsthat_chats(chat_id),\\n                            FOREIGN KEY(author) REFERENCES whatsthat_users(user_id) \\n                        )\", function (err) {\n              if (err) {\n                console.log(\"whatsthat_messages table already created\");\n              } else {\n                console.log(\"whatsthat_messages table created\");\n              }\n            });\n          });\n        });\n      });\n    });\n  }\n});\nmodule.exports = db;","map":{"version":3,"names":["sqlite3","require","verbose","DBSOURCE","db","Database","err","console","error","message","log","run","module","exports"],"sources":["C:/Users/bahvd/source/repos/mobileapp/app/config/db.js"],"sourcesContent":["const sqlite3 = require('sqlite3').verbose()\r\n\r\nconst DBSOURCE = \"db.sqlite\"\r\n\r\nlet db = new sqlite3.Database(DBSOURCE, (err) => {\r\n    if (err) {\r\n      // Cannot open database\r\n      console.error(err.message)\r\n      throw err\r\n    }else{\r\n        console.log('Connected to the SQLite database.') \r\n\r\n        db.run(`CREATE TABLE whatsthat_users (\r\n            user_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            given_name text NOT NULL,\r\n            family_name text NOT NULL,\r\n            email text NOT NULL UNIQUE,\r\n            password text NOT NULL,\r\n            salt text NOT NULL,\r\n            token text DEFAULT NULL UNIQUE,\r\n            CONSTRAINT email_unique UNIQUE (email),\r\n            CONSTRAINT token_unique UNIQUE (token)\r\n        )`, (err) => {\r\n\r\n            if(err){\r\n                //console.log(err)\r\n                console.log(\"whatsthat_users table already created\")\r\n            }else{\r\n                console.log(\"whatsthat_users table created\")\r\n            }\r\n\r\n            db.run(`CREATE TABLE whatsthat_user_contacts (\r\n                user_id INTEGER,\r\n                contact_id INTEGER,\r\n                blocked INTEGER NOT NULL DEFAULT 0,\r\n                PRIMARY KEY(user_id, contact_id),\r\n                FOREIGN KEY(user_id) REFERENCES whatsthat_users(user_id)\r\n                FOREIGN KEY(contact_id) REFERENCES whatsthat_users(user_id)\r\n            )`, (err) => {\r\n\r\n                if(err){\r\n                    //console.log(err)\r\n                    console.log(\"whatsthat_user_contacts table already created\")\r\n                }else{\r\n                    console.log(\"whatsthat_user_contacts table created\")\r\n                }\r\n\r\n                db.run(`CREATE TABLE whatsthat_chats (\r\n                    chat_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                    name TEXT NOT NULL,\r\n                    creator INTEGER NOT NULL,\r\n                    FOREIGN KEY(creator) REFERENCES whatsthat_users(user_id)                   \r\n                )`, (err) => {\r\n        \r\n                    if(err){\r\n                        //console.log(err)\r\n                        console.log(\"whatsthat_chats table already created\")\r\n                    }else{\r\n                        console.log(\"whatsthat_chats table created\")\r\n                    }\r\n\r\n                    db.run(`CREATE TABLE whatsthat_chat_users (\r\n                        chat_id INTEGER,\r\n                        user_id INTEGER,\r\n                        PRIMARY KEY(chat_id, user_id),\r\n                        FOREIGN KEY(chat_id) REFERENCES whatsthat_chats(chat_id),\r\n                        FOREIGN KEY(user_id) REFERENCES whatsthat_users(user_id) \r\n                    )`, (err) => {\r\n                \r\n                        if(err){\r\n                            //console.log(err)\r\n                            console.log(\"whatsthat_chat_users table already created\")\r\n                        }else{\r\n                            console.log(\"whatsthat_chat_users table created\")\r\n                        }\r\n\r\n                        db.run(`CREATE TABLE whatsthat_messages (\r\n                            message_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                            chat_id INTEGER NOT NULL,\r\n                            message TEXT NOT NULL,\r\n                            timestamp INTEGER NOT NULL DEFAULT -1,\r\n                            author INTEGER NOT NULL,\r\n                            FOREIGN KEY(chat_id) REFERENCES whatsthat_chats(chat_id),\r\n                            FOREIGN KEY(author) REFERENCES whatsthat_users(user_id) \r\n                        )`, (err) => {\r\n                        \r\n                            if(err){\r\n                                //console.log(err)\r\n                                console.log(\"whatsthat_messages table already created\")\r\n                            }else{\r\n                                console.log(\"whatsthat_messages table created\")\r\n                            }\r\n                        \r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\n\r\nmodule.exports = db"],"mappings":"AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,OAAO,EAAE;AAE5C,IAAMC,QAAQ,GAAG,WAAW;AAE5B,IAAIC,EAAE,GAAG,IAAIJ,OAAO,CAACK,QAAQ,CAACF,QAAQ,EAAE,UAACG,GAAG,EAAK;EAC7C,IAAIA,GAAG,EAAE;IAEPC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC;IAC1B,MAAMH,GAAG;EACX,CAAC,MAAI;IACDC,OAAO,CAACG,GAAG,CAAC,mCAAmC,CAAC;IAEhDN,EAAE,CAACO,GAAG,0bAUF,UAACL,GAAG,EAAK;MAET,IAAGA,GAAG,EAAC;QAEHC,OAAO,CAACG,GAAG,CAAC,uCAAuC,CAAC;MACxD,CAAC,MAAI;QACDH,OAAO,CAACG,GAAG,CAAC,+BAA+B,CAAC;MAChD;MAEAN,EAAE,CAACO,GAAG,gYAOF,UAACL,GAAG,EAAK;QAET,IAAGA,GAAG,EAAC;UAEHC,OAAO,CAACG,GAAG,CAAC,+CAA+C,CAAC;QAChE,CAAC,MAAI;UACDH,OAAO,CAACG,GAAG,CAAC,uCAAuC,CAAC;QACxD;QAEAN,EAAE,CAACO,GAAG,+SAKF,UAACL,GAAG,EAAK;UAET,IAAGA,GAAG,EAAC;YAEHC,OAAO,CAACG,GAAG,CAAC,uCAAuC,CAAC;UACxD,CAAC,MAAI;YACDH,OAAO,CAACG,GAAG,CAAC,+BAA+B,CAAC;UAChD;UAEAN,EAAE,CAACO,GAAG,iXAMF,UAACL,GAAG,EAAK;YAET,IAAGA,GAAG,EAAC;cAEHC,OAAO,CAACG,GAAG,CAAC,4CAA4C,CAAC;YAC7D,CAAC,MAAI;cACDH,OAAO,CAACG,GAAG,CAAC,oCAAoC,CAAC;YACrD;YAEAN,EAAE,CAACO,GAAG,8hBAQF,UAACL,GAAG,EAAK;cAET,IAAGA,GAAG,EAAC;gBAEHC,OAAO,CAACG,GAAG,CAAC,0CAA0C,CAAC;cAC3D,CAAC,MAAI;gBACDH,OAAO,CAACG,GAAG,CAAC,kCAAkC,CAAC;cACnD;YAEJ,CAAC,CAAC;UACN,CAAC,CAAC;QACN,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAGFE,MAAM,CAACC,OAAO,GAAGT,EAAE"},"metadata":{},"sourceType":"script","externalDependencies":[]}