{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar users = require(\"../models/user.server.models\"),\n  log = require(\"../lib/logger\")(),\n  validator = require(\"../lib/validator\"),\n  config = require(\"../config/config.js\"),\n  schema = require('../config/' + config.get('specification')),\n  emailvalidator = require(\"email-validator\");\nvar photo_tools = require(\"../lib/photo.tools.js\");\nvar create = function create(req, res) {\n  if (!validator.isValidSchema(req.body, 'components.schemas.AddUser')) {\n    log.warn(\"users.controller.create: bad user \" + JSON.stringify(req.body));\n    log.warn(validator.getLastErrors());\n    return res.status(400).send('Bad Request - body must match specification and email must be correct');\n  }\n  var user = Object.assign({}, req.body);\n  var password_regex = /^(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;\n  if (!emailvalidator.validate(user['email']) || !password_regex.test(user['password'])) {\n    log.warn(\"user.controller.create: failed validation \" + JSON.stringify(user));\n    return res.status(400).send('Bad request - email must be valid and password must be strong (greater than 8 characters inclusing one upper, one nummber, and one special character.');\n  }\n  users.insert(user, function (err, id) {\n    if (err && err.errno === 19) {\n      log.warn(\"user.controller.create: couldn't create \" + JSON.stringify(user) + \": \" + err);\n      return res.status(400).send('Bad Request - That user already exists');\n    }\n    if (err) {\n      log.warn(\"user.controller.create: couldn't create \" + JSON.stringify(user) + \": \" + err);\n      return res.sendStatus(500);\n    }\n    return res.status(201).send({\n      \"user_id\": id\n    });\n  });\n};\nvar login = function login(req, res) {\n  if (!validator.isValidSchema(req.body, 'components.schemas.LoginUser')) {\n    log.warn(\"users.controller.login: bad request \" + JSON.stringify(req.body));\n    return res.status(400).send('Bad Request - request must match the spec');\n  }\n  var email = req.body.email;\n  var password = req.body.password;\n  users.authenticate(email, password, function (err, id) {\n    if (err) {\n      log.warn(\"Failed to authenticate: \" + err);\n      return res.status(400).send('Invalid email/password supplied');\n    }\n    users.getToken(id, function (err, token) {\n      if (token) {\n        return res.send({\n          id: id,\n          token: token\n        });\n      } else {\n        users.setToken(id, function (err, token) {\n          return res.send({\n            id: id,\n            token: token\n          });\n        });\n      }\n    });\n  });\n};\nvar logout = function logout(req, res) {\n  var token = req.get(config.get('authToken'));\n  users.removeToken(token, function (err) {\n    if (err) {\n      return res.sendStatus(401);\n    }\n    return res.sendStatus(200);\n  });\n};\nvar get_one = function get_one(req, res) {\n  var id = parseInt(req.params.user_id);\n  if (!validator.isValidId(id)) return res.sendStatus(404);\n  users.getOne(id, function (err, results) {\n    if (err) {\n      log.warn(\"users.controller.get_one: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    if (!results) {\n      log.warn(\"users.controller.get_one: no results found\");\n      return res.sendStatus(404);\n    }\n    res.status(200).json(results);\n  });\n};\nvar update = function update(req, res) {\n  var id = parseInt(req.params.user_id);\n  if (!validator.isValidId(id)) return res.sendStatus(404);\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      return res.sendStatus(500);\n    }\n    if (_id !== id) return res.sendStatus(403);\n    if (!validator.isValidSchema(req.body, 'components.schemas.UpdateUser')) {\n      log.warn(\"users.controller.update: bad user \" + JSON.stringify(req.body));\n      return res.sendStatus(400);\n    }\n    users.getOne(id, function (err, results) {\n      if (err) return res.sendStatus(500);\n      if (!results) return res.sendStatus(404);\n      var givenname = '';\n      var familyname = '';\n      var email = '';\n      var password = '';\n      if (req.body.hasOwnProperty('first_name')) {\n        givenname = req.body.first_name;\n      } else {\n        givenname = results.first_name;\n      }\n      if (req.body.hasOwnProperty('last_name')) {\n        familyname = req.body.last_name;\n      } else {\n        familyname = results.last_name;\n      }\n      if (req.body.hasOwnProperty('email')) {\n        email = req.body.email;\n      } else {\n        email = results.email;\n      }\n      if (req.body.hasOwnProperty('password')) {\n        password = req.body.password;\n      }\n      if (!emailvalidator.validate(email)) {\n        res.status(400).send('Invalid email supplied');\n      }\n      var user = {};\n      if (password != '') {\n        var password_regex = /^(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;\n        if (!password_regex.test(password)) {\n          return res.status(400).send('Weak password');\n        }\n        user = {\n          \"first_name\": givenname,\n          \"last_name\": familyname,\n          \"email\": email,\n          \"password\": password\n        };\n      } else {\n        user = {\n          \"first_name\": givenname,\n          \"last_name\": familyname,\n          \"email\": email\n        };\n      }\n      users.alter(id, user, function (err) {\n        if (err) {\n          if (err.errno === 19) {\n            return res.status(400).send(\"Email already exists\");\n          }\n          console.log(err);\n          return res.sendStatus(400);\n        }\n        return res.sendStatus(200);\n      });\n    });\n  });\n};\nvar get_profile_photo = function get_profile_photo(req, res) {\n  var id = parseInt(req.params.user_id);\n  if (!validator.isValidId(id)) return res.sendStatus(404);\n  users.getOne(id, function (err, user) {\n    if (err) {\n      return res.sendStatus(500);\n    }\n    if (!user) {\n      return res.sendStatus(404);\n    }\n    users.retreivePhoto(id, function (imageDetails, err) {\n      if (err == \"Doesn't exist\") {\n        return res.sendStatus(404);\n      }\n      if (err) {\n        return res.sendStatus(500);\n      }\n      return res.status(200).contentType(imageDetails.mimeType).send(imageDetails.image);\n    });\n  });\n};\nvar add_profile_photo = function add_profile_photo(req, res) {\n  var id = parseInt(req.params.user_id);\n  if (!validator.isValidId(id)) return res.sendStatus(404);\n  if (req.header('Content-Type') != 'image/jpeg' && req.header('Content-Type') != 'image/png') {\n    return res.status(400).send('Bad Request: content type must be image/jpeg or image/png');\n  }\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      return res.sendStatus(500);\n    }\n    users.getOne(id, function (err, user) {\n      if (err) {\n        return res.sendStatus(500);\n      }\n      if (!user) {\n        return res.sendStatus(404);\n      }\n      if (_id != user.user_id) {\n        return res.sendStatus(403);\n      }\n      users.deletePhotoIfExists(id, function () {\n        var _ref = _asyncToGenerator(function* (err) {\n          if (err) {\n            console.log(err);\n            return res.sendStatus(500);\n          }\n          var image = req;\n          var fileExt = photo_tools.getImageExtension(req.header('Content-Type'));\n          if (!fileExt) {\n            return res.status(400).send('Bad Request: photo must be either image/jpeg or image/png type');\n          }\n          try {\n            yield users.addPhoto(image, fileExt, id, function (err) {\n              if (err) {\n                return res.sendStatus(500);\n              }\n              return res.sendStatus(200);\n            });\n          } catch (err) {\n            console.log(err);\n            return res.sendStatus(500);\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  });\n};\nvar search = function search(req, res) {\n  var params = req.query;\n  var params_valid = true;\n  if (params.search_in) {\n    console.log(params.search_in);\n    if (params.search_in != \"all\" && params.search_in != \"contacts\") {\n      params_valid = false;\n    }\n  }\n  if (params.limit) {\n    if (typeof params.limit != \"number\" && params.limit < 0) {\n      params_valid = false;\n    }\n  }\n  if (params.offset) {\n    if (typeof params.offset != \"number\" && params.offset < 0) {\n      params_valid = false;\n    }\n  }\n  if (!params_valid) {\n    log.warn(\"users.controller.search: parameters not valid\");\n    return res.sendStatus(400);\n  }\n  var token = req.get(config.get('authToken'));\n  users.getIdFromToken(token, function (err, _id) {\n    if (err) {\n      log.warn(\"users.controller.search: \" + JSON.stringify(err));\n      return res.sendStatus(500);\n    }\n    users.search_users(params, _id, function (err, results) {\n      if (err) {\n        log.warn(\"users.controller.search: \" + JSON.stringify(err));\n        return res.sendStatus(500);\n      }\n      return res.status(200).send(results);\n    });\n  });\n};\nmodule.exports = {\n  create: create,\n  login: login,\n  logout: logout,\n  get_one: get_one,\n  update: update,\n  get_profile_photo: get_profile_photo,\n  add_profile_photo: add_profile_photo,\n  search: search\n};","map":{"version":3,"names":["users","require","log","validator","config","schema","get","emailvalidator","photo_tools","create","req","res","isValidSchema","body","warn","JSON","stringify","getLastErrors","status","send","user","Object","assign","password_regex","validate","test","insert","err","id","errno","sendStatus","login","email","password","authenticate","getToken","token","setToken","logout","removeToken","get_one","parseInt","params","user_id","isValidId","getOne","results","json","update","getIdFromToken","_id","givenname","familyname","hasOwnProperty","first_name","last_name","alter","console","get_profile_photo","retreivePhoto","imageDetails","contentType","mimeType","image","add_profile_photo","header","deletePhotoIfExists","_ref","_asyncToGenerator","fileExt","getImageExtension","addPhoto","_x","apply","arguments","search","query","params_valid","search_in","limit","offset","search_users","module","exports"],"sources":["C:/Users/bahvd/source/repos/mobileapp/app/controllers/user.server.controllers.js"],"sourcesContent":["const\r\n  users = require('../models/user.server.models'),\r\n  log = require('../lib/logger')(),\r\n  validator = require('../lib/validator'),\r\n  config = require('../config/config.js'),\r\n  schema = require('../config/' + config.get('specification')),\r\n  emailvalidator = require(\"email-validator\");\r\n\r\nconst photo_tools = require('../lib/photo.tools.js');\r\n\r\n\r\nconst create = (req, res) => {\r\n    if (!validator.isValidSchema(req.body, 'components.schemas.AddUser')) {\r\n        log.warn(`users.controller.create: bad user ${JSON.stringify(req.body)}`);\r\n        log.warn(validator.getLastErrors());\r\n        return res.status(400).send('Bad Request - body must match specification and email must be correct');\r\n    }\r\n\r\n    let user = Object.assign({}, req.body);\r\n\r\n    const password_regex = /^(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;\r\n\r\n    if(!emailvalidator.validate(user['email']) || !password_regex.test(user['password'])){\r\n        log.warn(`user.controller.create: failed validation ${JSON.stringify(user)}`);\r\n        return res.status(400).send('Bad request - email must be valid and password must be strong (greater than 8 characters inclusing one upper, one nummber, and one special character.');\r\n    }\r\n\r\n    users.insert(user, function(err, id){\r\n        if(err && err.errno === 19){\r\n            log.warn(`user.controller.create: couldn't create ${JSON.stringify(user)}: ${err}`);\r\n            return res.status(400).send('Bad Request - That user already exists');\r\n        }\r\n\r\n        if(err) {\r\n            log.warn(`user.controller.create: couldn't create ${JSON.stringify(user)}: ${err}`);\r\n            return res.sendStatus(500);\r\n        }\r\n\r\n        return res.status(201).send({\"user_id\":id});  \r\n    });\r\n}\r\n\r\nconst login = (req, res) => {\r\n    if(!validator.isValidSchema(req.body, 'components.schemas.LoginUser')){\r\n        log.warn(`users.controller.login: bad request ${JSON.stringify(req.body)}`);\r\n        return res.status(400).send('Bad Request - request must match the spec');\r\n    }\r\n    \r\n    let email = req.body.email;\r\n    let password = req.body.password;\r\n    \r\n    users.authenticate(email, password, function(err, id){\r\n        //console.log(err, id);\r\n        if(err){\r\n            log.warn(\"Failed to authenticate: \" + err);\r\n            return res.status(400).send('Invalid email/password supplied');\r\n        }\r\n            \r\n        users.getToken(id, function(err, token){\r\n            /// return existing token if already set (don't modify tokens)\r\n            if (token){\r\n                return res.send({id: id, token: token});\r\n            }else{\r\n                // but if not, complete login by creating a token for the user\r\n                users.setToken(id, function(err, token){\r\n                    return res.send({id: id, token: token});\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nconst logout = (req, res) => {\r\n    let token = req.get(config.get('authToken'));\r\n    users.removeToken(token, function(err){\r\n        if (err){\r\n            return res.sendStatus(401);\r\n        }\r\n        \r\n        return res.sendStatus(200);\r\n    });\r\n}\r\n\r\nconst get_one = (req, res) => {\r\n    let id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(id)) return res.sendStatus(404);\r\n  \r\n    users.getOne(id, (err, results) => {\r\n        if (err) {\r\n            log.warn(`users.controller.get_one: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500);\r\n        }\r\n        \r\n        if (!results) {  // no user found\r\n            log.warn(`users.controller.get_one: no results found`);\r\n            return res.sendStatus(404);\r\n        }\r\n        \r\n        res.status(200).json(results);\r\n        \r\n    });\r\n}\r\n\r\nconst update = (req, res) => {\r\n    let id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(id)) return res.sendStatus(404);\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n\r\n        if(err){\r\n            return res.sendStatus(500);\r\n        }\r\n\r\n        if (_id !== id)\r\n            return res.sendStatus(403);\r\n        if (!validator.isValidSchema(req.body, 'components.schemas.UpdateUser')) {\r\n            log.warn(`users.controller.update: bad user ${JSON.stringify(req.body)}`);\r\n            return res.sendStatus(400);\r\n        }\r\n\r\n        users.getOne(id, function(err, results){\r\n            if(err) return res.sendStatus(500);\r\n            if (!results) return res.sendStatus(404);  // no user found\r\n\r\n            let givenname = '';\r\n            let familyname = '';\r\n            let email = '';\r\n            let password = '';\r\n\r\n            if(req.body.hasOwnProperty('first_name')){\r\n                givenname = req.body.first_name;\r\n            }else{\r\n                givenname = results.first_name;\r\n            }\r\n\r\n            if(req.body.hasOwnProperty('last_name')){\r\n                familyname = req.body.last_name;\r\n            }else{\r\n                familyname = results.last_name;\r\n            }\r\n\r\n            if(req.body.hasOwnProperty('email')){\r\n                email = req.body.email;\r\n            }else{\r\n                email = results.email;\r\n            }\r\n\r\n            if(req.body.hasOwnProperty('password')) {\r\n                password = req.body.password;\r\n            }\r\n\r\n            if(!emailvalidator.validate(email)){\r\n                res.status(400).send('Invalid email supplied');\r\n            }\r\n\r\n            let user = {};\r\n\r\n            if(password != ''){\r\n\r\n                const password_regex = /^(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;\r\n\r\n                if(!password_regex.test(password)){\r\n                    return res.status(400).send('Weak password');\r\n                }\r\n\r\n                user = {\r\n                    \"first_name\": givenname,\r\n                    \"last_name\": familyname,\r\n                    \"email\": email,\r\n                    \"password\": password\r\n                }\r\n            }else{\r\n                user = {\r\n                    \"first_name\": givenname,\r\n                    \"last_name\": familyname,\r\n                    \"email\": email\r\n                }\r\n            }\r\n                \r\n            users.alter(id, user, function(err){\r\n                if (err){\r\n\r\n                    if(err.errno === 19){\r\n                        return res.status(400).send(\"Email already exists\");\r\n                    }\r\n                    console.log(err);\r\n                    return res.sendStatus(400);\r\n                }\r\n\r\n                return res.sendStatus(200);\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\nconst get_profile_photo = (req, res) => {\r\n    let id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(id)) return res.sendStatus(404);\r\n\r\n    users.getOne(id, (err, user) => {\r\n        if(err){\r\n            return res.sendStatus(500);\r\n        }\r\n        \r\n        if(!user){\r\n            return res.sendStatus(404);\r\n        }\r\n        \r\n        users.retreivePhoto(id, (imageDetails, err) => {\r\n            if(err == \"Doesn't exist\"){\r\n                return res.sendStatus(404);\r\n            }\r\n            \r\n            if(err){\r\n                return res.sendStatus(500);\r\n            }\r\n\r\n            return res.status(200).contentType(imageDetails.mimeType).send(imageDetails.image);\r\n        });\r\n    });\r\n}\r\n\r\nconst add_profile_photo = (req, res) => {\r\n    let id = parseInt(req.params.user_id);\r\n    if (!validator.isValidId(id)) return res.sendStatus(404);\r\n      \r\n    if(req.header('Content-Type') != 'image/jpeg' && req.header('Content-Type') != 'image/png' ){\r\n        return res.status(400).send('Bad Request: content type must be image/jpeg or image/png')\r\n    }\r\n      \r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n\r\n        if(err){\r\n            return res.sendStatus(500);\r\n        }\r\n\r\n        users.getOne(id, (err, user) => {\r\n            if(err){\r\n                return res.sendStatus(500);\r\n            }\r\n            \r\n            if(!user){\r\n                return res.sendStatus(404);\r\n            }\r\n\r\n            if(_id != user.user_id){\r\n                return res.sendStatus(403);\r\n            }\r\n                    \r\n            users.deletePhotoIfExists(id, async function(err){\r\n                if(err){\r\n                    console.log(err);\r\n                    return res.sendStatus(500);\r\n                }\r\n                            \r\n                let image = req;\r\n                let fileExt = photo_tools.getImageExtension(req.header('Content-Type'));\r\n        \r\n                if(!fileExt){\r\n                    return res.status(400).send('Bad Request: photo must be either image/jpeg or image/png type');\r\n                }\r\n                                \r\n                try{\r\n                    await users.addPhoto(image, fileExt, id, function(err){\r\n                        if(err){\r\n                            return res.sendStatus(500);\r\n                        }\r\n\r\n                        return res.sendStatus(200);\r\n                        \r\n                    });\r\n                }catch(err){\r\n                    console.log(err);\r\n                    return res.sendStatus(500);\r\n                }\r\n            })\r\n\r\n        });\r\n    });\r\n}\r\n\r\nconst search = (req, res) => {\r\n    let params = req.query;\r\n    let params_valid = true;\r\n\r\n    if(params.search_in){\r\n        console.log(params.search_in)\r\n        if(params.search_in != \"all\" && params.search_in != \"contacts\"){\r\n            params_valid = false;\r\n        }\r\n    }\r\n\r\n    if(params.limit){\r\n        if(typeof(params.limit) != \"number\" && params.limit < 0){\r\n            params_valid = false;\r\n        }\r\n    }\r\n\r\n    if(params.offset){\r\n        if(typeof(params.offset) != \"number\" && (params.offset < 0)){\r\n            params_valid = false;\r\n        }\r\n    }\r\n\r\n    if(!params_valid){\r\n        log.warn(`users.controller.search: parameters not valid`);\r\n        return res.sendStatus(400); \r\n    }\r\n\r\n    let token = req.get(config.get('authToken'));\r\n    users.getIdFromToken(token, (err, _id) => {\r\n\r\n        if(err){\r\n            log.warn(`users.controller.search: ${JSON.stringify(err)}`);\r\n            return res.sendStatus(500); \r\n        }\r\n\r\n        users.search_users(params, _id, (err, results) => {\r\n            if(err){\r\n                log.warn(`users.controller.search: ${JSON.stringify(err)}`);\r\n                return res.sendStatus(500); \r\n            }\r\n\r\n            return res.status(200).send(results);\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n    create: create,\r\n    login: login,\r\n    logout: logout,\r\n    get_one: get_one,\r\n    update: update,\r\n    get_profile_photo: get_profile_photo,\r\n    add_profile_photo: add_profile_photo,\r\n    search: search\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}